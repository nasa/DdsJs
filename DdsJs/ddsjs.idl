
module DDS {
    typedef /* DOMAINID_TYPE_NATIVE */ unsigned long DomainId_t;
    typedef /* HANDLE_TYPE_NATIVE */ unsigned long   InstanceHandle_t;

    struct BuiltinTopicKey_t { 
        /* BUILTIN_TOPIC_KEY_TYPE_NATIVE */ long value[3];
    };

    typedef sequence<InstanceHandle_t> InstanceHandleSeq;

    typedef long ReturnCode_t;
    typedef long QosPolicyId_t;
    typedef sequence<string> StringSeq;
    
    struct Duration_t { 
        long sec; 
        unsigned long nanosec; 
    };
    
    // ========================================================================
    // CoreDX v4 has chosen to define both a C++ based DDS::Time_t and a C
    // based DDS_Time_t. The former seems to only be used in method argument
    // lists, where the latter is used as the actual type of fields in data
    // structures and corresponding C++ DDS namespace type definitions. The
    // CoreDX.js IDL compiler expects the C++ DDS::Time_t to be the actual
    // type of C++ data structures that use it (DDS::SampleInfo at the time
    // of this writing), but with the C++ data structures merely being
    // typedefs of the C counterparts, the type of the corresponding fields
    // is instead the C based DDS_Time_t. This worked with CoreDX v3 because
    // similar to the data structures that use DDS::Time_t (indirectly),
    // DDS::Time_t was itself a typedef to DDS_Time_t. 
    // struct Time_t {
    //     long sec; 
    //     unsigned long nanosec; 
    // };
    // ======================================================================
    
    // ----------------------------------------------------------------------
    // Pre-defined values
    // ----------------------------------------------------------------------
    const InstanceHandle_t HANDLE_NIL = /* HANDLE_NIL_NATIVE */ 0;
    
    const long LENGTH_UNLIMITED = -1;
    
    const long            DURATION_INFINITE_SEC   = 0x7fffffff;
    const unsigned long   DURATION_INFINITE_NSEC  = 0x7fffffff;

    const long            DURATION_ZERO_SEC       = 0;
    const unsigned long   DURATION_ZERO_NSEC      = 0;

    const long            TIME_INVALID_SEC        = -1;
    const unsigned long   TIME_INVALID_NSEC       = 0xffffffff;

    // ----------------------------------------------------------------------
    // Return codes
    // ----------------------------------------------------------------------
    const ReturnCode_t RETCODE_OK                    = 0;
    const ReturnCode_t RETCODE_ERROR                 = 1;
    const ReturnCode_t RETCODE_UNSUPPORTED           = 2;
    const ReturnCode_t RETCODE_BAD_PARAMETER         = 3;
    const ReturnCode_t RETCODE_PRECONDITION_NOT_MET  = 4;
    const ReturnCode_t RETCODE_OUT_OF_RESOURCES      = 5;
    const ReturnCode_t RETCODE_NOT_ENABLED           = 6;
    const ReturnCode_t RETCODE_IMMUTABLE_POLICY      = 7;
    const ReturnCode_t RETCODE_INCONSISTENT_POLICY   = 8;
    const ReturnCode_t RETCODE_ALREADY_DELETED       = 9;
    const ReturnCode_t RETCODE_TIMEOUT               = 10;
    const ReturnCode_t RETCODE_NO_DATA               = 11;
    const ReturnCode_t RETCODE_ILLEGAL_OPERATION     = 12;
    
    // ----------------------------------------------------------------------
    // Status to support listeners and conditions
    // ----------------------------------------------------------------------

    typedef unsigned long StatusKind;
    typedef unsigned long StatusMask;    // bit-mask StatusKind

    const StatusKind INCONSISTENT_TOPIC_STATUS            = /* 0x0001 << 0  */ 0x0001;
    const StatusKind OFFERED_DEADLINE_MISSED_STATUS       = /* 0x0001 << 1  */ 0x0002;
    const StatusKind REQUESTED_DEADLINE_MISSED_STATUS     = /* 0x0001 << 2  */ 0x0004;
    const StatusKind OFFERED_INCOMPATIBLE_QOS_STATUS      = /* 0x0001 << 5  */ 0x0020;
    const StatusKind REQUESTED_INCOMPATIBLE_QOS_STATUS    = /* 0x0001 << 6  */ 0x0040;
    const StatusKind SAMPLE_LOST_STATUS                   = /* 0x0001 << 7  */ 0x0080;
    const StatusKind SAMPLE_REJECTED_STATUS               = /* 0x0001 << 8  */ 0x0100;
    const StatusKind DATA_ON_READERS_STATUS               = /* 0x0001 << 9  */ 0x0200;
    const StatusKind DATA_AVAILABLE_STATUS                = /* 0x0001 << 10 */ 0x0400;
    const StatusKind LIVELINESS_LOST_STATUS               = /* 0x0001 << 11 */ 0x0800;
    const StatusKind LIVELINESS_CHANGED_STATUS            = /* 0x0001 << 12 */ 0x1000;
    const StatusKind PUBLICATION_MATCHED_STATUS           = /* 0x0001 << 13 */ 0x2000;
    const StatusKind SUBSCRIPTION_MATCHED_STATUS          = /* 0x0001 << 14 */ 0x4000;

    struct InconsistentTopicStatus {
        long total_count;
        long total_count_change;
    };

    struct SampleLostStatus {
        long total_count;
        long total_count_change;
    };

    // ------------------------------------------------------------------------
    // Unfortunately, CoreDX v5 defines a bona-fide C++ enumeration for this,
    // but does not use it in the corresponding SampleRejectedStatus structure,
    // which happens to be a type alias to the DDS_SampleRejectedStatusKind
    // C data structure. So we have to hand-write the conversion routines based
    // on the CoreDX major version.
    // enum SampleRejectedStatusKind {
    //     NOT_REJECTED,
    //     REJECTED_BY_INSTANCE_LIMIT,
    //     REJECTED_BY_SAMPLES_LIMIT,
    //     REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT
    // };
    // 
    // struct SampleRejectedStatus {
    //     long                         total_count;
    //     long                         total_count_change;
    //     SampleRejectedStatusKind     last_reason;
    //     InstanceHandle_t             last_instance_handle;
    // };
    // ------------------------------------------------------------------------

    struct LivelinessLostStatus { 
        long                 total_count;
        long                 total_count_change;
    };

    struct LivelinessChangedStatus {
        long                 alive_count;
        long                 not_alive_count;
        long                 alive_count_change;
        long                 not_alive_count_change;
        InstanceHandle_t     last_publication_handle;
    };

    struct OfferedDeadlineMissedStatus {
        long                 total_count;
        long                 total_count_change;
        InstanceHandle_t     last_instance_handle;
    };

    struct RequestedDeadlineMissedStatus {
        long                 total_count;
        long                 total_count_change;
        InstanceHandle_t     last_instance_handle;
    };

    struct QosPolicyCount {
        QosPolicyId_t        policy_id;
        long                 count;
    };

    typedef sequence<QosPolicyCount> QosPolicyCountSeq;

    struct OfferedIncompatibleQosStatus {
        long                 total_count;
        long                 total_count_change;
        QosPolicyId_t        last_policy_id;
        QosPolicyCountSeq    policies;
    };

    struct RequestedIncompatibleQosStatus {
        long                 total_count;
        long                 total_count_change;
        QosPolicyId_t        last_policy_id;
        QosPolicyCountSeq    policies;
    };


    struct PublicationMatchedStatus {
        long                 total_count;
        long                 total_count_change;
        long                 current_count;
        long                 current_count_change;
        InstanceHandle_t     last_subscription_handle;
    };


    struct SubscriptionMatchedStatus {
        long                 total_count;
        long                 total_count_change;
        long                 current_count;
        long                 current_count_change;
        InstanceHandle_t     last_publication_handle;
    };

    // Sample states to support reads
    typedef unsigned long SampleStateKind;
    const SampleStateKind READ_SAMPLE_STATE                     = /* 0x0001 << 0 */ 0x0001;
    const SampleStateKind NOT_READ_SAMPLE_STATE                 = /* 0x0001 << 1 */ 0x0002;
   
    // This is a bit-mask SampleStateKind
    typedef unsigned long SampleStateMask;
    const SampleStateMask ANY_SAMPLE_STATE                      = 0xffff;

    // View states to support reads
    typedef unsigned long ViewStateKind;
    const ViewStateKind NEW_VIEW_STATE                          = /* 0x0001 << 0 */ 0x0001;
    const ViewStateKind NOT_NEW_VIEW_STATE                      = /* 0x0001 << 1 */ 0x0002;

    // This is a bit-mask ViewStateKind
    typedef unsigned long ViewStateMask;
    const ViewStateMask ANY_VIEW_STATE                          = 0xffff;

    // Instance states to support reads
    typedef unsigned long InstanceStateKind;
    const InstanceStateKind ALIVE_INSTANCE_STATE                = /* 0x0001 << 0 */ 0x0001;
    const InstanceStateKind NOT_ALIVE_DISPOSED_INSTANCE_STATE   = /* 0x0001 << 1 */ 0x0002;
    const InstanceStateKind NOT_ALIVE_NO_WRITERS_INSTANCE_STATE = /* 0x0001 << 2 */ 0x0004;
   
    // This is a bit-mask InstanceStateKind
    typedef unsigned long InstanceStateMask;
    const InstanceStateMask ANY_INSTANCE_STATE                  = 0xffff;
    const InstanceStateMask NOT_ALIVE_INSTANCE_STATE            = 0x006;
   
    // ----------------------------------------------------------------------
    // Qos
    // ----------------------------------------------------------------------
    const string USERDATA_QOS_POLICY_NAME              = "UserData";
    const string DURABILITY_QOS_POLICY_NAME            = "Durability";
    const string PRESENTATION_QOS_POLICY_NAME          = "Presentation";
    const string DEADLINE_QOS_POLICY_NAME              = "Deadline";
    const string LATENCYBUDGET_QOS_POLICY_NAME         = "LatencyBudget";
    const string OWNERSHIP_QOS_POLICY_NAME             = "Ownership";
    const string OWNERSHIPSTRENGTH_QOS_POLICY_NAME     = "OwnershipStrength";
    const string LIVELINESS_QOS_POLICY_NAME            = "Liveliness";
    const string TIMEBASEDFILTER_QOS_POLICY_NAME       = "TimeBasedFilter";
    const string PARTITION_QOS_POLICY_NAME             = "Partition";
    const string RELIABILITY_QOS_POLICY_NAME           = "Reliability";
    const string DESTINATIONORDER_QOS_POLICY_NAME      = "DestinationOrder";
    const string HISTORY_QOS_POLICY_NAME               = "History";
    const string RESOURCELIMITS_QOS_POLICY_NAME        = "ResourceLimits";
    const string ENTITYFACTORY_QOS_POLICY_NAME         = "EntityFactory";
    const string WRITERDATALIFECYCLE_QOS_POLICY_NAME   = "WriterDataLifecycle";
    const string READERDATALIFECYCLE_QOS_POLICY_NAME   = "ReaderDataLifecycle";
    const string TOPICDATA_QOS_POLICY_NAME             = "TopicData";
    const string GROUPDATA_QOS_POLICY_NAME             = "TransportPriority";
    const string LIFESPAN_QOS_POLICY_NAME              = "Lifespan";
    const string DURABILITYSERVICE_POLICY_NAME         = "DurabilityService";

    const QosPolicyId_t INVALID_QOS_POLICY_ID              = 0;
    const QosPolicyId_t USERDATA_QOS_POLICY_ID             = 1;
    const QosPolicyId_t DURABILITY_QOS_POLICY_ID           = 2;
    const QosPolicyId_t PRESENTATION_QOS_POLICY_ID         = 3;
    const QosPolicyId_t DEADLINE_QOS_POLICY_ID             = 4;
    const QosPolicyId_t LATENCYBUDGET_QOS_POLICY_ID        = 5;
    const QosPolicyId_t OWNERSHIP_QOS_POLICY_ID            = 6;
    const QosPolicyId_t OWNERSHIPSTRENGTH_QOS_POLICY_ID    = 7;
    const QosPolicyId_t LIVELINESS_QOS_POLICY_ID           = 8;
    const QosPolicyId_t TIMEBASEDFILTER_QOS_POLICY_ID      = 9;
    const QosPolicyId_t PARTITION_QOS_POLICY_ID            = 10;
    const QosPolicyId_t RELIABILITY_QOS_POLICY_ID          = 11;
    const QosPolicyId_t DESTINATIONORDER_QOS_POLICY_ID     = 12;
    const QosPolicyId_t HISTORY_QOS_POLICY_ID              = 13;
    const QosPolicyId_t RESOURCELIMITS_QOS_POLICY_ID       = 14;
    const QosPolicyId_t ENTITYFACTORY_QOS_POLICY_ID        = 15;
    const QosPolicyId_t WRITERDATALIFECYCLE_QOS_POLICY_ID  = 16;
    const QosPolicyId_t READERDATALIFECYCLE_QOS_POLICY_ID  = 17;
    const QosPolicyId_t TOPICDATA_QOS_POLICY_ID            = 18;
    const QosPolicyId_t GROUPDATA_QOS_POLICY_ID            = 19;
    const QosPolicyId_t TRANSPORTPRIORITY_QOS_POLICY_ID    = 20;
    const QosPolicyId_t LIFESPAN_QOS_POLICY_ID             = 21;
    const QosPolicyId_t DURABILITYSERVICE_QOS_POLICY_ID    = 22;

    struct UserDataQosPolicy {
        sequence<octet> value;
    };

    struct TopicDataQosPolicy {
        sequence<octet> value;
    };

    struct GroupDataQosPolicy {
        sequence<octet> value;
    };

    struct TransportPriorityQosPolicy {
        long value;
    };

    struct LifespanQosPolicy {
        Duration_t duration;
    };

    enum DurabilityQosPolicyKind {
        VOLATILE_DURABILITY_QOS,
        TRANSIENT_LOCAL_DURABILITY_QOS,
        TRANSIENT_DURABILITY_QOS,
        PERSISTENT_DURABILITY_QOS
    };
    struct DurabilityQosPolicy {
        DurabilityQosPolicyKind kind;
    };

    enum PresentationQosPolicyAccessScopeKind {
        INSTANCE_PRESENTATION_QOS,
        TOPIC_PRESENTATION_QOS,
        GROUP_PRESENTATION_QOS
    };
    struct PresentationQosPolicy {
        PresentationQosPolicyAccessScopeKind access_scope;
        boolean coherent_access;
        boolean ordered_access;
    };

    struct DeadlineQosPolicy {
        Duration_t period;
    };

    struct LatencyBudgetQosPolicy {
        Duration_t duration;
    };

    enum OwnershipQosPolicyKind {
        SHARED_OWNERSHIP_QOS,
        EXCLUSIVE_OWNERSHIP_QOS
    };
    struct OwnershipQosPolicy {
        OwnershipQosPolicyKind kind;
    };

    struct OwnershipStrengthQosPolicy {
        long value;
    };

    enum LivelinessQosPolicyKind {
        AUTOMATIC_LIVELINESS_QOS,
        MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
        MANUAL_BY_TOPIC_LIVELINESS_QOS
    };

    struct LivelinessQosPolicy {
        LivelinessQosPolicyKind kind;
        Duration_t lease_duration;
    };

    struct TimeBasedFilterQosPolicy {
        Duration_t minimum_separation;
    };

    struct PartitionQosPolicy {
        StringSeq name;
    };

    enum ReliabilityQosPolicyKind {
        BEST_EFFORT_RELIABILITY_QOS,
        RELIABLE_RELIABILITY_QOS
    };

    struct ReliabilityQosPolicy {
        ReliabilityQosPolicyKind kind;
        Duration_t max_blocking_time;
    };

   enum DestinationOrderQosPolicyKind {
        BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,
        BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
    };
    struct DestinationOrderQosPolicy {
        DestinationOrderQosPolicyKind kind;
    };

    enum HistoryQosPolicyKind {
        KEEP_LAST_HISTORY_QOS,
        KEEP_ALL_HISTORY_QOS
    };
    struct HistoryQosPolicy {
        HistoryQosPolicyKind kind;
        long depth;
    };

    struct ResourceLimitsQosPolicy {
        long max_samples;
        long max_instances;
        long max_samples_per_instance;
    };

    struct EntityFactoryQosPolicy {
        boolean autoenable_created_entities;
    };

    struct WriterDataLifecycleQosPolicy {
        boolean autodispose_unregistered_instances;
    };

    struct ReaderDataLifecycleQosPolicy {
        Duration_t autopurge_nowriter_samples_delay;
        Duration_t autopurge_disposed_samples_delay;
    };

    struct DurabilityServiceQosPolicy {
        Duration_t              service_cleanup_delay;
        HistoryQosPolicyKind    history_kind;
        long                    history_depth;
        long                    max_samples;
        long                    max_instances;
        long                    max_samples_per_instance;
    }; 

    /* CoreDX Extension */
    // struct EntityNameQosPolicy {
    //     string<31> value;
    // };
    
    /* CoreDX Extension */
    // struct RTPSReaderQosPolicy {
    //     Duration_t			heartbeat_response_delay;
    //     octet				accept_batch_msg;
    //     octet				send_typecode;
    //     octet				send_initial_nack;
    //     unsigned long		precache_max_samples;
    // };
    
    /* CoreDX Extension */
    // const long RESERVED_LOCATOR_KIND_QOS = 0;
    // const long UDPV4_LOCATOR_KIND_QOS = 1;
    // const long UDPV6_LOCATOR_KIND_QOS = 2;
    // const long UDS_LOCATOR_KIND_QOS = 4;
    // const long TCPV4_LOCATOR_KIND_QOS = 0x8001;
    // const long TCPV6_LOCATOR_KIND_QOS = 0x8002;
    // const long RESV2_LOCATOR_KIND_QOS = 0x8003;
    // const long LMT_LOCATOR_KIND_QOS = 0x8004;
    // const long SSLV4_LOCATOR_KIND_QOS = 0x8005;
    // const long SSLV6_LOCATOR_KIND_QOS = 0x8006;
    // const long SSLCLIENT_LOCATOR_KIND_QOS = 0x8007;
    
    /* CoreDX Extension */
    // struct Locator {
    //     long kind;
    //     unsigned long port;
    //     octet addr[16];
    // };
    
    /* CoreDX Extension */
    // struct ParticipantLocator {
    //     unsigned long participant_id;
    //     unsigned long participant_id_max;
    //     Locator participant_locator;
    // };
    
    /* CoreDX Extension */
    // struct PeerParticipantQosPolicy {
    //     sequence<ParticipantLocator> value;
    //     octet strict_match;
    // };
    

   struct DomainParticipantFactoryQos {
        EntityFactoryQosPolicy entity_factory;
    };

    struct DomainParticipantQos {
        UserDataQosPolicy  user_data;
        EntityFactoryQosPolicy entity_factory;
        /* EntityNameQosPolicy entity_name; CoreDX Extension */
        /* PeerParticipantQosPolicy peer_participants; CoreDX Extension */
    };

    struct TopicQos {
        TopicDataQosPolicy                   topic_data;
        DurabilityQosPolicy                  durability;
        DurabilityServiceQosPolicy           durability_service;
        DeadlineQosPolicy                    deadline;
        LatencyBudgetQosPolicy               latency_budget;
        LivelinessQosPolicy                  liveliness;
        ReliabilityQosPolicy                 reliability;
        DestinationOrderQosPolicy            destination_order;
        HistoryQosPolicy                     history;
        ResourceLimitsQosPolicy              resource_limits;
        TransportPriorityQosPolicy           transport_priority;
        LifespanQosPolicy                    lifespan;

        OwnershipQosPolicy                   ownership;
    };

    struct DataWriterQos {
        DurabilityQosPolicy                  durability;
        DurabilityServiceQosPolicy           durability_service;
        DeadlineQosPolicy                    deadline;
        LatencyBudgetQosPolicy               latency_budget;
        LivelinessQosPolicy                  liveliness;
        ReliabilityQosPolicy                 reliability;
        DestinationOrderQosPolicy            destination_order;
        HistoryQosPolicy                     history;
        ResourceLimitsQosPolicy              resource_limits;
        TransportPriorityQosPolicy           transport_priority;
        LifespanQosPolicy                    lifespan;

        UserDataQosPolicy                    user_data;
        OwnershipQosPolicy                   ownership;
        OwnershipStrengthQosPolicy           ownership_strength;
        WriterDataLifecycleQosPolicy         writer_data_lifecycle;
    };

    struct PublisherQos {
        PresentationQosPolicy                presentation;
        PartitionQosPolicy                   partition;
        GroupDataQosPolicy                   group_data;
        EntityFactoryQosPolicy               entity_factory;
    };

    struct DataReaderQos {
        DurabilityQosPolicy                  durability;
        DeadlineQosPolicy                    deadline;
        LatencyBudgetQosPolicy               latency_budget;
        LivelinessQosPolicy                  liveliness;
        ReliabilityQosPolicy                 reliability;
        DestinationOrderQosPolicy            destination_order;
        HistoryQosPolicy                     history;
        ResourceLimitsQosPolicy              resource_limits;

        UserDataQosPolicy                    user_data;
        OwnershipQosPolicy                   ownership;
        TimeBasedFilterQosPolicy             time_based_filter;
        ReaderDataLifecycleQosPolicy         reader_data_lifecycle;
        /* RTPSReaderQosPolicy					 rtps_reader; CoreDX Extension */
    };

    struct SubscriberQos {
        PresentationQosPolicy                presentation;
        PartitionQosPolicy                   partition;
        GroupDataQosPolicy                   group_data;
        EntityFactoryQosPolicy               entity_factory;
    };

    // ----------------------------------------------------------------------

    struct ParticipantBuiltinTopicData {
        BuiltinTopicKey_t                    key;
        UserDataQosPolicy                    user_data;
        /* string                               entity_name; CoreDX Extension */
    };

    // Not supported by CoreDX
    // struct TopicBuiltinTopicData {
    //     BuiltinTopicKey_t                    key;
    //     string                               name;
    //     string                               type_name;
    //     DurabilityQosPolicy                  durability;
    //     DurabilityServiceQosPolicy           durability_service;
    //     DeadlineQosPolicy                    deadline;
    //     LatencyBudgetQosPolicy               latency_budget;
    //     LivelinessQosPolicy                  liveliness;
    //     ReliabilityQosPolicy                 reliability;
    //     TransportPriorityQosPolicy           transport_priority;
    //     LifespanQosPolicy                    lifespan;
    //     DestinationOrderQosPolicy            destination_order;
    //     HistoryQosPolicy                     history;
    //     ResourceLimitsQosPolicy              resource_limits;
    //     OwnershipQosPolicy                   ownership;
    //     TopicDataQosPolicy                   topic_data;
    // };

    struct PublicationBuiltinTopicData {
        BuiltinTopicKey_t                    key;
        BuiltinTopicKey_t                    participant_key;
        string                               topic_name;
        string                               type_name;

        DurabilityQosPolicy                  durability;
        DurabilityServiceQosPolicy           durability_service;
        DeadlineQosPolicy                    deadline;
        LatencyBudgetQosPolicy               latency_budget;
        LivelinessQosPolicy                  liveliness;
        ReliabilityQosPolicy                 reliability;
        LifespanQosPolicy                    lifespan;
        UserDataQosPolicy                    user_data;
        OwnershipQosPolicy                   ownership;
        OwnershipStrengthQosPolicy           ownership_strength;
        DestinationOrderQosPolicy            destination_order;

        PresentationQosPolicy                presentation;
        PartitionQosPolicy                   partition;
        TopicDataQosPolicy                   topic_data;
        GroupDataQosPolicy                   group_data;
        /* string                               entity_name; CoreDX Extension */
    };

    struct SubscriptionBuiltinTopicData {
        BuiltinTopicKey_t                    key;
        BuiltinTopicKey_t                    participant_key;
        string                               topic_name;
        string                               type_name;

        DurabilityQosPolicy                  durability;
        DeadlineQosPolicy                    deadline;
        LatencyBudgetQosPolicy               latency_budget;
        LivelinessQosPolicy                  liveliness;
        ReliabilityQosPolicy                 reliability;
        OwnershipQosPolicy                   ownership;
        DestinationOrderQosPolicy            destination_order;
        UserDataQosPolicy                    user_data;
        TimeBasedFilterQosPolicy             time_based_filter;

        PresentationQosPolicy                presentation;
        PartitionQosPolicy                   partition;
        TopicDataQosPolicy                   topic_data;
        GroupDataQosPolicy                   group_data;
    };

    struct SampleInfo {
        SampleStateKind      sample_state;
        ViewStateKind        view_state;
        InstanceStateKind    instance_state;
        // Must comment out because CoreDX v4 has conflicting definitions
        // for Time_t: a bona-fide C++ DDS::Time_t (that seems to only
        // be used for method arguments), and a C DDS_Time_t (that seems to
        // be used in all DDS data structures, including DDS::SampleInfo,
        // which is just a typedef to the C DDS_SampleInfo struct).
        // Time_t               source_timestamp;
        InstanceHandle_t     instance_handle;
        InstanceHandle_t     publication_handle;
        long                 disposed_generation_count;
        long                 no_writers_generation_count;
        long                 sample_rank;
        long                 generation_rank;
        long                 absolute_generation_rank;
        boolean              valid_data;
    };

    typedef sequence<SampleInfo> SampleInfoSeq;
};

