// ----------------------------------------------------------------------------
// This code was automatically generated by the DDS.js compiler. Do not edit
// by hand as changes will be lost during recompilation.
// Generated on: June 28, 2019 3:59:53 PM GMT
// ----------------------------------------------------------------------------

#include <cmath>
#include <string>
#include <sstream>

#include <v8.h>
#include <node.h>
#include <node_object_wrap.h>

#include <DdsJs/coredx_missing.hh>
#include <DdsJs/TypeUtility.hh>

#include "ddsjs_base.hh"

using std::string;
using std::stringstream;
using v8::Object;
using v8::Value;
using v8::String;
using v8::FunctionTemplate;
using v8::Number;
using v8::Persistent;
using v8::Local;
using v8::HandleScope;
using v8::Null;
using v8::Undefined;
using v8::Function;
using v8::Array;
using v8::TryCatch;
using v8::Context;
using v8::Integer;
using v8::Isolate;
using v8::EscapableHandleScope;
using v8::FunctionCallbackInfo;
using v8::MaybeLocal;
using v8::Exception;
using v8::Maybe;
using node::ObjectWrap;
using DDS::Topic;
using DDS::ReturnCode_t;
using DDS::DomainParticipant;
using DDS::SampleInfoSeq;
using DDS::Subscriber;
using DDS::TopicDescription;
using DDS::ReadCondition;
using DDS::WaitSet;
using DDS::ConditionSeq;
using DDS::Duration_t;
using DDS::Condition;
using DDS::Publisher;


// ======================================================
// MODULE DECLARATION: DDS
// ======================================================
namespace DDS {

// ======================================================
// ENUM IMPLEMENTATION: PresentationQosPolicyAccessScopeKind
// ======================================================
// Initialization of enumeration PresentationQosPolicyAccessScopeKind field type
void PresentationQosPolicyAccessScopeKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "INSTANCE_PRESENTATION_QOS"),
		Number::New(isolate, ::DDS::INSTANCE_PRESENTATION_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "TOPIC_PRESENTATION_QOS"),
		Number::New(isolate, ::DDS::TOPIC_PRESENTATION_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "GROUP_PRESENTATION_QOS"),
		Number::New(isolate, ::DDS::GROUP_PRESENTATION_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "PresentationQosPolicyAccessScopeKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum PresentationQosPolicyAccessScopeKind
Local<Value> PresentationQosPolicyAccessScopeKindField::FromCppToJsValue(PresentationQosPolicyAccessScopeKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum PresentationQosPolicyAccessScopeKind
bool PresentationQosPolicyAccessScopeKindField::FromJsValueToCpp(Local<Value> jsVal, PresentationQosPolicyAccessScopeKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::PresentationQosPolicyAccessScopeKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: HistoryQosPolicyKind
// ======================================================
// Initialization of enumeration HistoryQosPolicyKind field type
void HistoryQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "KEEP_LAST_HISTORY_QOS"),
		Number::New(isolate, ::DDS::KEEP_LAST_HISTORY_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "KEEP_ALL_HISTORY_QOS"),
		Number::New(isolate, ::DDS::KEEP_ALL_HISTORY_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "HistoryQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum HistoryQosPolicyKind
Local<Value> HistoryQosPolicyKindField::FromCppToJsValue(HistoryQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum HistoryQosPolicyKind
bool HistoryQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, HistoryQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::HistoryQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: DestinationOrderQosPolicyKind
// ======================================================
// Initialization of enumeration DestinationOrderQosPolicyKind field type
void DestinationOrderQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS"),
		Number::New(isolate, ::DDS::BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS"),
		Number::New(isolate, ::DDS::BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "DestinationOrderQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum DestinationOrderQosPolicyKind
Local<Value> DestinationOrderQosPolicyKindField::FromCppToJsValue(DestinationOrderQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum DestinationOrderQosPolicyKind
bool DestinationOrderQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, DestinationOrderQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::DestinationOrderQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: ReliabilityQosPolicyKind
// ======================================================
// Initialization of enumeration ReliabilityQosPolicyKind field type
void ReliabilityQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "BEST_EFFORT_RELIABILITY_QOS"),
		Number::New(isolate, ::DDS::BEST_EFFORT_RELIABILITY_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "RELIABLE_RELIABILITY_QOS"),
		Number::New(isolate, ::DDS::RELIABLE_RELIABILITY_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "ReliabilityQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum ReliabilityQosPolicyKind
Local<Value> ReliabilityQosPolicyKindField::FromCppToJsValue(ReliabilityQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum ReliabilityQosPolicyKind
bool ReliabilityQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, ReliabilityQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::ReliabilityQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: LivelinessQosPolicyKind
// ======================================================
// Initialization of enumeration LivelinessQosPolicyKind field type
void LivelinessQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "AUTOMATIC_LIVELINESS_QOS"),
		Number::New(isolate, ::DDS::AUTOMATIC_LIVELINESS_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "MANUAL_BY_PARTICIPANT_LIVELINESS_QOS"),
		Number::New(isolate, ::DDS::MANUAL_BY_PARTICIPANT_LIVELINESS_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "MANUAL_BY_TOPIC_LIVELINESS_QOS"),
		Number::New(isolate, ::DDS::MANUAL_BY_TOPIC_LIVELINESS_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "LivelinessQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum LivelinessQosPolicyKind
Local<Value> LivelinessQosPolicyKindField::FromCppToJsValue(LivelinessQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum LivelinessQosPolicyKind
bool LivelinessQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, LivelinessQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::LivelinessQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: DurabilityQosPolicyKind
// ======================================================
// Initialization of enumeration DurabilityQosPolicyKind field type
void DurabilityQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "VOLATILE_DURABILITY_QOS"),
		Number::New(isolate, ::DDS::VOLATILE_DURABILITY_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "TRANSIENT_LOCAL_DURABILITY_QOS"),
		Number::New(isolate, ::DDS::TRANSIENT_LOCAL_DURABILITY_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "TRANSIENT_DURABILITY_QOS"),
		Number::New(isolate, ::DDS::TRANSIENT_DURABILITY_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "PERSISTENT_DURABILITY_QOS"),
		Number::New(isolate, ::DDS::PERSISTENT_DURABILITY_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "DurabilityQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum DurabilityQosPolicyKind
Local<Value> DurabilityQosPolicyKindField::FromCppToJsValue(DurabilityQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum DurabilityQosPolicyKind
bool DurabilityQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, DurabilityQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::DurabilityQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: SampleRejectedStatusKind
// ======================================================
// Initialization of enumeration SampleRejectedStatusKind field type
void SampleRejectedStatusKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "NOT_REJECTED"),
		Number::New(isolate, ::DDS::NOT_REJECTED),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "REJECTED_BY_INSTANCE_LIMIT"),
		Number::New(isolate, ::DDS::REJECTED_BY_INSTANCE_LIMIT),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "REJECTED_BY_SAMPLES_LIMIT"),
		Number::New(isolate, ::DDS::REJECTED_BY_SAMPLES_LIMIT),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT"),
		Number::New(isolate, ::DDS::REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "SampleRejectedStatusKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum SampleRejectedStatusKind
Local<Value> SampleRejectedStatusKindField::FromCppToJsValue(SampleRejectedStatusKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum SampleRejectedStatusKind
bool SampleRejectedStatusKindField::FromJsValueToCpp(Local<Value> jsVal, SampleRejectedStatusKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::SampleRejectedStatusKindField::ValueType >(longVal);
	}

	return result;
}
// ======================================================
// ENUM IMPLEMENTATION: OwnershipQosPolicyKind
// ======================================================
// Initialization of enumeration OwnershipQosPolicyKind field type
void OwnershipQosPolicyKindField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Context> ctx = Local<Context>::New(
		isolate,
		isolate->GetCurrentContext()
	);
	Local<Object> enumObj(Object::New(isolate));

	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "SHARED_OWNERSHIP_QOS"),
		Number::New(isolate, ::DDS::SHARED_OWNERSHIP_QOS),
		::v8::ReadOnly);
	enumObj->ForceSet(ctx,
		String::NewFromUtf8(isolate, "EXCLUSIVE_OWNERSHIP_QOS"),
		Number::New(isolate, ::DDS::EXCLUSIVE_OWNERSHIP_QOS),
		::v8::ReadOnly);


	Maybe< bool > setResult = exports->Set(
		ctx,
		String::NewFromUtf8(isolate, "OwnershipQosPolicyKind"),
		enumObj
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}
}

// From C++ to JavaScript for enum OwnershipQosPolicyKind
Local<Value> OwnershipQosPolicyKindField::FromCppToJsValue(OwnershipQosPolicyKindField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);

	return scope.Escape(::DdsJs::LongField::FromCppToJsValue(static_cast< ::DdsJs::LongField::ValueType >(cppValue)));
}

// From JavaScript to C++ for enum OwnershipQosPolicyKind
bool OwnershipQosPolicyKindField::FromJsValueToCpp(Local<Value> jsVal, OwnershipQosPolicyKindField::RefType cppValueRet)
{
	::DdsJs::LongField::ValueType longVal;
	bool result = ::DdsJs::LongField::FromJsValueToCpp(jsVal, longVal);
	if (result)
	{
		cppValueRet = static_cast< ::DDS::OwnershipQosPolicyKindField::ValueType >(longVal);
	}

	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: TimeBasedFilterQosPolicy
// ======================================================
// Field names for topic TimeBasedFilterQosPolicy
Persistent<String> TimeBasedFilterQosPolicyField::minimum_separationFieldName;

// Initialization of topic TimeBasedFilterQosPolicy field type.
void TimeBasedFilterQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		TimeBasedFilterQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TimeBasedFilterQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	TimeBasedFilterQosPolicyField::minimum_separationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "minimum_separation"));

}

// New instance of topic TimeBasedFilterQosPolicy field type.
void TimeBasedFilterQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		TimeBasedFilterQosPolicyField::FromCppToJsValue(
			TimeBasedFilterQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic TimeBasedFilterQosPolicy
Local<Value> TimeBasedFilterQosPolicyField::FromCppToJsValue(TimeBasedFilterQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TimeBasedFilterQosPolicyField::minimum_separationFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.minimum_separation
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic TimeBasedFilterQosPolicy
bool TimeBasedFilterQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, TimeBasedFilterQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_minimum_separationFieldName =
		Local<String>::New(isolate,
			TimeBasedFilterQosPolicyField::minimum_separationFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_minimum_separationFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.minimum_separation);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DataWriterQos
// ======================================================
// Field names for topic DataWriterQos
Persistent<String> DataWriterQosField::durabilityFieldName;
Persistent<String> DataWriterQosField::durability_serviceFieldName;
Persistent<String> DataWriterQosField::deadlineFieldName;
Persistent<String> DataWriterQosField::latency_budgetFieldName;
Persistent<String> DataWriterQosField::livelinessFieldName;
Persistent<String> DataWriterQosField::reliabilityFieldName;
Persistent<String> DataWriterQosField::destination_orderFieldName;
Persistent<String> DataWriterQosField::historyFieldName;
Persistent<String> DataWriterQosField::resource_limitsFieldName;
Persistent<String> DataWriterQosField::transport_priorityFieldName;
Persistent<String> DataWriterQosField::lifespanFieldName;
Persistent<String> DataWriterQosField::user_dataFieldName;
Persistent<String> DataWriterQosField::ownershipFieldName;
Persistent<String> DataWriterQosField::ownership_strengthFieldName;
Persistent<String> DataWriterQosField::writer_data_lifecycleFieldName;

// Initialization of topic DataWriterQos field type.
void DataWriterQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DataWriterQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DataWriterQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DataWriterQosField::durabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability"));
	DataWriterQosField::durability_serviceFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability_service"));
	DataWriterQosField::deadlineFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "deadline"));
	DataWriterQosField::latency_budgetFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "latency_budget"));
	DataWriterQosField::livelinessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "liveliness"));
	DataWriterQosField::reliabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reliability"));
	DataWriterQosField::destination_orderFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "destination_order"));
	DataWriterQosField::historyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "history"));
	DataWriterQosField::resource_limitsFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "resource_limits"));
	DataWriterQosField::transport_priorityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "transport_priority"));
	DataWriterQosField::lifespanFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "lifespan"));
	DataWriterQosField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));
	DataWriterQosField::ownershipFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership"));
	DataWriterQosField::ownership_strengthFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership_strength"));
	DataWriterQosField::writer_data_lifecycleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "writer_data_lifecycle"));

}

// New instance of topic DataWriterQos field type.
void DataWriterQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DataWriterQosField::FromCppToJsValue(
			DataWriterQosField::ValueType()));
}

// From C++ to JavaScript for topic DataWriterQos
Local<Value> DataWriterQosField::FromCppToJsValue(DataWriterQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::durabilityFieldName
		),
		::DDS::DurabilityQosPolicyField::FromCppToJsValue(
			cppValue.durability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::durability_serviceFieldName
		),
		::DDS::DurabilityServiceQosPolicyField::FromCppToJsValue(
			cppValue.durability_service
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::deadlineFieldName
		),
		::DDS::DeadlineQosPolicyField::FromCppToJsValue(
			cppValue.deadline
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::latency_budgetFieldName
		),
		::DDS::LatencyBudgetQosPolicyField::FromCppToJsValue(
			cppValue.latency_budget
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::livelinessFieldName
		),
		::DDS::LivelinessQosPolicyField::FromCppToJsValue(
			cppValue.liveliness
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::reliabilityFieldName
		),
		::DDS::ReliabilityQosPolicyField::FromCppToJsValue(
			cppValue.reliability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::destination_orderFieldName
		),
		::DDS::DestinationOrderQosPolicyField::FromCppToJsValue(
			cppValue.destination_order
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::historyFieldName
		),
		::DDS::HistoryQosPolicyField::FromCppToJsValue(
			cppValue.history
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::resource_limitsFieldName
		),
		::DDS::ResourceLimitsQosPolicyField::FromCppToJsValue(
			cppValue.resource_limits
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::transport_priorityFieldName
		),
		::DDS::TransportPriorityQosPolicyField::FromCppToJsValue(
			cppValue.transport_priority
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::lifespanFieldName
		),
		::DDS::LifespanQosPolicyField::FromCppToJsValue(
			cppValue.lifespan
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::ownershipFieldName
		),
		::DDS::OwnershipQosPolicyField::FromCppToJsValue(
			cppValue.ownership
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::ownership_strengthFieldName
		),
		::DDS::OwnershipStrengthQosPolicyField::FromCppToJsValue(
			cppValue.ownership_strength
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataWriterQosField::writer_data_lifecycleFieldName
		),
		::DDS::WriterDataLifecycleQosPolicyField::FromCppToJsValue(
			cppValue.writer_data_lifecycle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DataWriterQos
bool DataWriterQosField::FromJsValueToCpp(Local<Value> jsVal, DataWriterQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_durabilityFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::durabilityFieldName);
	Local<String> l_durability_serviceFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::durability_serviceFieldName);
	Local<String> l_deadlineFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::deadlineFieldName);
	Local<String> l_latency_budgetFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::latency_budgetFieldName);
	Local<String> l_livelinessFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::livelinessFieldName);
	Local<String> l_reliabilityFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::reliabilityFieldName);
	Local<String> l_destination_orderFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::destination_orderFieldName);
	Local<String> l_historyFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::historyFieldName);
	Local<String> l_resource_limitsFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::resource_limitsFieldName);
	Local<String> l_transport_priorityFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::transport_priorityFieldName);
	Local<String> l_lifespanFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::lifespanFieldName);
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::user_dataFieldName);
	Local<String> l_ownershipFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::ownershipFieldName);
	Local<String> l_ownership_strengthFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::ownership_strengthFieldName);
	Local<String> l_writer_data_lifecycleFieldName =
		Local<String>::New(isolate,
			DataWriterQosField::writer_data_lifecycleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durabilityFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durability_serviceFieldName)).IsEmpty() &&
		::DDS::DurabilityServiceQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability_service);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_deadlineFieldName)).IsEmpty() &&
		::DDS::DeadlineQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.deadline);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_latency_budgetFieldName)).IsEmpty() &&
		::DDS::LatencyBudgetQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.latency_budget);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_livelinessFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.liveliness);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reliabilityFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reliability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_destination_orderFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.destination_order);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_historyFieldName)).IsEmpty() &&
		::DDS::HistoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.history);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_resource_limitsFieldName)).IsEmpty() &&
		::DDS::ResourceLimitsQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.resource_limits);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_transport_priorityFieldName)).IsEmpty() &&
		::DDS::TransportPriorityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.transport_priority);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_lifespanFieldName)).IsEmpty() &&
		::DDS::LifespanQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.lifespan);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownershipFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownership_strengthFieldName)).IsEmpty() &&
		::DDS::OwnershipStrengthQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership_strength);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_writer_data_lifecycleFieldName)).IsEmpty() &&
		::DDS::WriterDataLifecycleQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.writer_data_lifecycle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: EntityFactoryQosPolicy
// ======================================================
// Field names for topic EntityFactoryQosPolicy
Persistent<String> EntityFactoryQosPolicyField::autoenable_created_entitiesFieldName;

// Initialization of topic EntityFactoryQosPolicy field type.
void EntityFactoryQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		EntityFactoryQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "EntityFactoryQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	EntityFactoryQosPolicyField::autoenable_created_entitiesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "autoenable_created_entities"));

}

// New instance of topic EntityFactoryQosPolicy field type.
void EntityFactoryQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		EntityFactoryQosPolicyField::FromCppToJsValue(
			EntityFactoryQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic EntityFactoryQosPolicy
Local<Value> EntityFactoryQosPolicyField::FromCppToJsValue(EntityFactoryQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			EntityFactoryQosPolicyField::autoenable_created_entitiesFieldName
		),
		::DdsJs::BooleanField::FromCppToJsValue(
			cppValue.autoenable_created_entities
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic EntityFactoryQosPolicy
bool EntityFactoryQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, EntityFactoryQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_autoenable_created_entitiesFieldName =
		Local<String>::New(isolate,
			EntityFactoryQosPolicyField::autoenable_created_entitiesFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_autoenable_created_entitiesFieldName)).IsEmpty() &&
		::DdsJs::BooleanField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.autoenable_created_entities);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: LivelinessChangedStatus
// ======================================================
// Field names for topic LivelinessChangedStatus
Persistent<String> LivelinessChangedStatusField::alive_countFieldName;
Persistent<String> LivelinessChangedStatusField::not_alive_countFieldName;
Persistent<String> LivelinessChangedStatusField::alive_count_changeFieldName;
Persistent<String> LivelinessChangedStatusField::not_alive_count_changeFieldName;
Persistent<String> LivelinessChangedStatusField::last_publication_handleFieldName;

// Initialization of topic LivelinessChangedStatus field type.
void LivelinessChangedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		LivelinessChangedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LivelinessChangedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	LivelinessChangedStatusField::alive_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "alive_count"));
	LivelinessChangedStatusField::not_alive_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "not_alive_count"));
	LivelinessChangedStatusField::alive_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "alive_count_change"));
	LivelinessChangedStatusField::not_alive_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "not_alive_count_change"));
	LivelinessChangedStatusField::last_publication_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_publication_handle"));

}

// New instance of topic LivelinessChangedStatus field type.
void LivelinessChangedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		LivelinessChangedStatusField::FromCppToJsValue(
			LivelinessChangedStatusField::ValueType()));
}

// From C++ to JavaScript for topic LivelinessChangedStatus
Local<Value> LivelinessChangedStatusField::FromCppToJsValue(LivelinessChangedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessChangedStatusField::alive_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.alive_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessChangedStatusField::not_alive_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.not_alive_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessChangedStatusField::alive_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.alive_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessChangedStatusField::not_alive_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.not_alive_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessChangedStatusField::last_publication_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_publication_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic LivelinessChangedStatus
bool LivelinessChangedStatusField::FromJsValueToCpp(Local<Value> jsVal, LivelinessChangedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_alive_countFieldName =
		Local<String>::New(isolate,
			LivelinessChangedStatusField::alive_countFieldName);
	Local<String> l_not_alive_countFieldName =
		Local<String>::New(isolate,
			LivelinessChangedStatusField::not_alive_countFieldName);
	Local<String> l_alive_count_changeFieldName =
		Local<String>::New(isolate,
			LivelinessChangedStatusField::alive_count_changeFieldName);
	Local<String> l_not_alive_count_changeFieldName =
		Local<String>::New(isolate,
			LivelinessChangedStatusField::not_alive_count_changeFieldName);
	Local<String> l_last_publication_handleFieldName =
		Local<String>::New(isolate,
			LivelinessChangedStatusField::last_publication_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_alive_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.alive_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_not_alive_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.not_alive_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_alive_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.alive_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_not_alive_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.not_alive_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_publication_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_publication_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: RequestedIncompatibleQosStatus
// ======================================================
// Field names for topic RequestedIncompatibleQosStatus
Persistent<String> RequestedIncompatibleQosStatusField::total_countFieldName;
Persistent<String> RequestedIncompatibleQosStatusField::total_count_changeFieldName;
Persistent<String> RequestedIncompatibleQosStatusField::last_policy_idFieldName;
Persistent<String> RequestedIncompatibleQosStatusField::policiesFieldName;

// Initialization of topic RequestedIncompatibleQosStatus field type.
void RequestedIncompatibleQosStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		RequestedIncompatibleQosStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RequestedIncompatibleQosStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	RequestedIncompatibleQosStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	RequestedIncompatibleQosStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	RequestedIncompatibleQosStatusField::last_policy_idFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_policy_id"));
	RequestedIncompatibleQosStatusField::policiesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "policies"));

}

// New instance of topic RequestedIncompatibleQosStatus field type.
void RequestedIncompatibleQosStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		RequestedIncompatibleQosStatusField::FromCppToJsValue(
			RequestedIncompatibleQosStatusField::ValueType()));
}

// From C++ to JavaScript for topic RequestedIncompatibleQosStatus
Local<Value> RequestedIncompatibleQosStatusField::FromCppToJsValue(RequestedIncompatibleQosStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedIncompatibleQosStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedIncompatibleQosStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedIncompatibleQosStatusField::last_policy_idFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.last_policy_id
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedIncompatibleQosStatusField::policiesFieldName
		),
		::DdsJs::UnboundedSeqField< ::DDS::QosPolicyCountField >::FromCppToJsValue(
			cppValue.policies
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic RequestedIncompatibleQosStatus
bool RequestedIncompatibleQosStatusField::FromJsValueToCpp(Local<Value> jsVal, RequestedIncompatibleQosStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			RequestedIncompatibleQosStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			RequestedIncompatibleQosStatusField::total_count_changeFieldName);
	Local<String> l_last_policy_idFieldName =
		Local<String>::New(isolate,
			RequestedIncompatibleQosStatusField::last_policy_idFieldName);
	Local<String> l_policiesFieldName =
		Local<String>::New(isolate,
			RequestedIncompatibleQosStatusField::policiesFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_policy_idFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_policy_id);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_policiesFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DDS::QosPolicyCountField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.policies);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: ParticipantBuiltinTopicData
// ======================================================
// Field names for topic ParticipantBuiltinTopicData
Persistent<String> ParticipantBuiltinTopicDataField::keyFieldName;
Persistent<String> ParticipantBuiltinTopicDataField::user_dataFieldName;

// Initialization of topic ParticipantBuiltinTopicData field type.
void ParticipantBuiltinTopicDataField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		ParticipantBuiltinTopicDataField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ParticipantBuiltinTopicData"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	ParticipantBuiltinTopicDataField::keyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "key"));
	ParticipantBuiltinTopicDataField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));

}

// New instance of topic ParticipantBuiltinTopicData field type.
void ParticipantBuiltinTopicDataField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		ParticipantBuiltinTopicDataField::FromCppToJsValue(
			ParticipantBuiltinTopicDataField::ValueType()));
}

// From C++ to JavaScript for topic ParticipantBuiltinTopicData
Local<Value> ParticipantBuiltinTopicDataField::FromCppToJsValue(ParticipantBuiltinTopicDataField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ParticipantBuiltinTopicDataField::keyFieldName
		),
		::DDS::BuiltinTopicKey_tField::FromCppToJsValue(
			cppValue.key
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ParticipantBuiltinTopicDataField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic ParticipantBuiltinTopicData
bool ParticipantBuiltinTopicDataField::FromJsValueToCpp(Local<Value> jsVal, ParticipantBuiltinTopicDataField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_keyFieldName =
		Local<String>::New(isolate,
			ParticipantBuiltinTopicDataField::keyFieldName);
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			ParticipantBuiltinTopicDataField::user_dataFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_keyFieldName)).IsEmpty() &&
		::DDS::BuiltinTopicKey_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.key);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SampleRejectedStatus
// ======================================================
// Field names for topic SampleRejectedStatus
Persistent<String> SampleRejectedStatusField::total_countFieldName;
Persistent<String> SampleRejectedStatusField::total_count_changeFieldName;
Persistent<String> SampleRejectedStatusField::last_reasonFieldName;
Persistent<String> SampleRejectedStatusField::last_instance_handleFieldName;

// Initialization of topic SampleRejectedStatus field type.
void SampleRejectedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SampleRejectedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SampleRejectedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SampleRejectedStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	SampleRejectedStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	SampleRejectedStatusField::last_reasonFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_reason"));
	SampleRejectedStatusField::last_instance_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_instance_handle"));

}

// New instance of topic SampleRejectedStatus field type.
void SampleRejectedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SampleRejectedStatusField::FromCppToJsValue(
			SampleRejectedStatusField::ValueType()));
}

// From C++ to JavaScript for topic SampleRejectedStatus
Local<Value> SampleRejectedStatusField::FromCppToJsValue(SampleRejectedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleRejectedStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleRejectedStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleRejectedStatusField::last_reasonFieldName
		),
		::DDS::SampleRejectedStatusKindField::FromCppToJsValue(
			cppValue.last_reason
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleRejectedStatusField::last_instance_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_instance_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SampleRejectedStatus
bool SampleRejectedStatusField::FromJsValueToCpp(Local<Value> jsVal, SampleRejectedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			SampleRejectedStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			SampleRejectedStatusField::total_count_changeFieldName);
	Local<String> l_last_reasonFieldName =
		Local<String>::New(isolate,
			SampleRejectedStatusField::last_reasonFieldName);
	Local<String> l_last_instance_handleFieldName =
		Local<String>::New(isolate,
			SampleRejectedStatusField::last_instance_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_reasonFieldName)).IsEmpty() &&
		::DDS::SampleRejectedStatusKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_reason);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_instance_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_instance_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: LatencyBudgetQosPolicy
// ======================================================
// Field names for topic LatencyBudgetQosPolicy
Persistent<String> LatencyBudgetQosPolicyField::durationFieldName;

// Initialization of topic LatencyBudgetQosPolicy field type.
void LatencyBudgetQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		LatencyBudgetQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LatencyBudgetQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	LatencyBudgetQosPolicyField::durationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "duration"));

}

// New instance of topic LatencyBudgetQosPolicy field type.
void LatencyBudgetQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		LatencyBudgetQosPolicyField::FromCppToJsValue(
			LatencyBudgetQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic LatencyBudgetQosPolicy
Local<Value> LatencyBudgetQosPolicyField::FromCppToJsValue(LatencyBudgetQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LatencyBudgetQosPolicyField::durationFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.duration
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic LatencyBudgetQosPolicy
bool LatencyBudgetQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, LatencyBudgetQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_durationFieldName =
		Local<String>::New(isolate,
			LatencyBudgetQosPolicyField::durationFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durationFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.duration);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: TopicQos
// ======================================================
// Field names for topic TopicQos
Persistent<String> TopicQosField::topic_dataFieldName;
Persistent<String> TopicQosField::durabilityFieldName;
Persistent<String> TopicQosField::durability_serviceFieldName;
Persistent<String> TopicQosField::deadlineFieldName;
Persistent<String> TopicQosField::latency_budgetFieldName;
Persistent<String> TopicQosField::livelinessFieldName;
Persistent<String> TopicQosField::reliabilityFieldName;
Persistent<String> TopicQosField::destination_orderFieldName;
Persistent<String> TopicQosField::historyFieldName;
Persistent<String> TopicQosField::resource_limitsFieldName;
Persistent<String> TopicQosField::transport_priorityFieldName;
Persistent<String> TopicQosField::lifespanFieldName;
Persistent<String> TopicQosField::ownershipFieldName;

// Initialization of topic TopicQos field type.
void TopicQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		TopicQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TopicQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	TopicQosField::topic_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "topic_data"));
	TopicQosField::durabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability"));
	TopicQosField::durability_serviceFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability_service"));
	TopicQosField::deadlineFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "deadline"));
	TopicQosField::latency_budgetFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "latency_budget"));
	TopicQosField::livelinessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "liveliness"));
	TopicQosField::reliabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reliability"));
	TopicQosField::destination_orderFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "destination_order"));
	TopicQosField::historyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "history"));
	TopicQosField::resource_limitsFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "resource_limits"));
	TopicQosField::transport_priorityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "transport_priority"));
	TopicQosField::lifespanFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "lifespan"));
	TopicQosField::ownershipFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership"));

}

// New instance of topic TopicQos field type.
void TopicQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		TopicQosField::FromCppToJsValue(
			TopicQosField::ValueType()));
}

// From C++ to JavaScript for topic TopicQos
Local<Value> TopicQosField::FromCppToJsValue(TopicQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::topic_dataFieldName
		),
		::DDS::TopicDataQosPolicyField::FromCppToJsValue(
			cppValue.topic_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::durabilityFieldName
		),
		::DDS::DurabilityQosPolicyField::FromCppToJsValue(
			cppValue.durability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::durability_serviceFieldName
		),
		::DDS::DurabilityServiceQosPolicyField::FromCppToJsValue(
			cppValue.durability_service
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::deadlineFieldName
		),
		::DDS::DeadlineQosPolicyField::FromCppToJsValue(
			cppValue.deadline
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::latency_budgetFieldName
		),
		::DDS::LatencyBudgetQosPolicyField::FromCppToJsValue(
			cppValue.latency_budget
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::livelinessFieldName
		),
		::DDS::LivelinessQosPolicyField::FromCppToJsValue(
			cppValue.liveliness
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::reliabilityFieldName
		),
		::DDS::ReliabilityQosPolicyField::FromCppToJsValue(
			cppValue.reliability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::destination_orderFieldName
		),
		::DDS::DestinationOrderQosPolicyField::FromCppToJsValue(
			cppValue.destination_order
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::historyFieldName
		),
		::DDS::HistoryQosPolicyField::FromCppToJsValue(
			cppValue.history
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::resource_limitsFieldName
		),
		::DDS::ResourceLimitsQosPolicyField::FromCppToJsValue(
			cppValue.resource_limits
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::transport_priorityFieldName
		),
		::DDS::TransportPriorityQosPolicyField::FromCppToJsValue(
			cppValue.transport_priority
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::lifespanFieldName
		),
		::DDS::LifespanQosPolicyField::FromCppToJsValue(
			cppValue.lifespan
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicQosField::ownershipFieldName
		),
		::DDS::OwnershipQosPolicyField::FromCppToJsValue(
			cppValue.ownership
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic TopicQos
bool TopicQosField::FromJsValueToCpp(Local<Value> jsVal, TopicQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_topic_dataFieldName =
		Local<String>::New(isolate,
			TopicQosField::topic_dataFieldName);
	Local<String> l_durabilityFieldName =
		Local<String>::New(isolate,
			TopicQosField::durabilityFieldName);
	Local<String> l_durability_serviceFieldName =
		Local<String>::New(isolate,
			TopicQosField::durability_serviceFieldName);
	Local<String> l_deadlineFieldName =
		Local<String>::New(isolate,
			TopicQosField::deadlineFieldName);
	Local<String> l_latency_budgetFieldName =
		Local<String>::New(isolate,
			TopicQosField::latency_budgetFieldName);
	Local<String> l_livelinessFieldName =
		Local<String>::New(isolate,
			TopicQosField::livelinessFieldName);
	Local<String> l_reliabilityFieldName =
		Local<String>::New(isolate,
			TopicQosField::reliabilityFieldName);
	Local<String> l_destination_orderFieldName =
		Local<String>::New(isolate,
			TopicQosField::destination_orderFieldName);
	Local<String> l_historyFieldName =
		Local<String>::New(isolate,
			TopicQosField::historyFieldName);
	Local<String> l_resource_limitsFieldName =
		Local<String>::New(isolate,
			TopicQosField::resource_limitsFieldName);
	Local<String> l_transport_priorityFieldName =
		Local<String>::New(isolate,
			TopicQosField::transport_priorityFieldName);
	Local<String> l_lifespanFieldName =
		Local<String>::New(isolate,
			TopicQosField::lifespanFieldName);
	Local<String> l_ownershipFieldName =
		Local<String>::New(isolate,
			TopicQosField::ownershipFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_topic_dataFieldName)).IsEmpty() &&
		::DDS::TopicDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.topic_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durabilityFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durability_serviceFieldName)).IsEmpty() &&
		::DDS::DurabilityServiceQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability_service);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_deadlineFieldName)).IsEmpty() &&
		::DDS::DeadlineQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.deadline);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_latency_budgetFieldName)).IsEmpty() &&
		::DDS::LatencyBudgetQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.latency_budget);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_livelinessFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.liveliness);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reliabilityFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reliability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_destination_orderFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.destination_order);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_historyFieldName)).IsEmpty() &&
		::DDS::HistoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.history);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_resource_limitsFieldName)).IsEmpty() &&
		::DDS::ResourceLimitsQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.resource_limits);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_transport_priorityFieldName)).IsEmpty() &&
		::DDS::TransportPriorityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.transport_priority);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_lifespanFieldName)).IsEmpty() &&
		::DDS::LifespanQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.lifespan);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownershipFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SubscriberQos
// ======================================================
// Field names for topic SubscriberQos
Persistent<String> SubscriberQosField::presentationFieldName;
Persistent<String> SubscriberQosField::partitionFieldName;
Persistent<String> SubscriberQosField::group_dataFieldName;
Persistent<String> SubscriberQosField::entity_factoryFieldName;

// Initialization of topic SubscriberQos field type.
void SubscriberQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SubscriberQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SubscriberQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SubscriberQosField::presentationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "presentation"));
	SubscriberQosField::partitionFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "partition"));
	SubscriberQosField::group_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "group_data"));
	SubscriberQosField::entity_factoryFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "entity_factory"));

}

// New instance of topic SubscriberQos field type.
void SubscriberQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SubscriberQosField::FromCppToJsValue(
			SubscriberQosField::ValueType()));
}

// From C++ to JavaScript for topic SubscriberQos
Local<Value> SubscriberQosField::FromCppToJsValue(SubscriberQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriberQosField::presentationFieldName
		),
		::DDS::PresentationQosPolicyField::FromCppToJsValue(
			cppValue.presentation
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriberQosField::partitionFieldName
		),
		::DDS::PartitionQosPolicyField::FromCppToJsValue(
			cppValue.partition
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriberQosField::group_dataFieldName
		),
		::DDS::GroupDataQosPolicyField::FromCppToJsValue(
			cppValue.group_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriberQosField::entity_factoryFieldName
		),
		::DDS::EntityFactoryQosPolicyField::FromCppToJsValue(
			cppValue.entity_factory
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SubscriberQos
bool SubscriberQosField::FromJsValueToCpp(Local<Value> jsVal, SubscriberQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_presentationFieldName =
		Local<String>::New(isolate,
			SubscriberQosField::presentationFieldName);
	Local<String> l_partitionFieldName =
		Local<String>::New(isolate,
			SubscriberQosField::partitionFieldName);
	Local<String> l_group_dataFieldName =
		Local<String>::New(isolate,
			SubscriberQosField::group_dataFieldName);
	Local<String> l_entity_factoryFieldName =
		Local<String>::New(isolate,
			SubscriberQosField::entity_factoryFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_presentationFieldName)).IsEmpty() &&
		::DDS::PresentationQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.presentation);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_partitionFieldName)).IsEmpty() &&
		::DDS::PartitionQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.partition);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_group_dataFieldName)).IsEmpty() &&
		::DDS::GroupDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.group_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_entity_factoryFieldName)).IsEmpty() &&
		::DDS::EntityFactoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.entity_factory);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SampleInfo
// ======================================================
// Field names for topic SampleInfo
Persistent<String> SampleInfoField::sample_stateFieldName;
Persistent<String> SampleInfoField::view_stateFieldName;
Persistent<String> SampleInfoField::instance_stateFieldName;
Persistent<String> SampleInfoField::instance_handleFieldName;
Persistent<String> SampleInfoField::publication_handleFieldName;
Persistent<String> SampleInfoField::disposed_generation_countFieldName;
Persistent<String> SampleInfoField::no_writers_generation_countFieldName;
Persistent<String> SampleInfoField::sample_rankFieldName;
Persistent<String> SampleInfoField::generation_rankFieldName;
Persistent<String> SampleInfoField::absolute_generation_rankFieldName;
Persistent<String> SampleInfoField::valid_dataFieldName;

// Initialization of topic SampleInfo field type.
void SampleInfoField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SampleInfoField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SampleInfo"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SampleInfoField::sample_stateFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "sample_state"));
	SampleInfoField::view_stateFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "view_state"));
	SampleInfoField::instance_stateFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "instance_state"));
	SampleInfoField::instance_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "instance_handle"));
	SampleInfoField::publication_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "publication_handle"));
	SampleInfoField::disposed_generation_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "disposed_generation_count"));
	SampleInfoField::no_writers_generation_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "no_writers_generation_count"));
	SampleInfoField::sample_rankFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "sample_rank"));
	SampleInfoField::generation_rankFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "generation_rank"));
	SampleInfoField::absolute_generation_rankFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "absolute_generation_rank"));
	SampleInfoField::valid_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "valid_data"));

}

// New instance of topic SampleInfo field type.
void SampleInfoField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SampleInfoField::FromCppToJsValue(
			SampleInfoField::ValueType()));
}

// From C++ to JavaScript for topic SampleInfo
Local<Value> SampleInfoField::FromCppToJsValue(SampleInfoField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::sample_stateFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.sample_state
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::view_stateFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.view_state
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::instance_stateFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.instance_state
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::instance_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.instance_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::publication_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.publication_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::disposed_generation_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.disposed_generation_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::no_writers_generation_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.no_writers_generation_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::sample_rankFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.sample_rank
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::generation_rankFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.generation_rank
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::absolute_generation_rankFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.absolute_generation_rank
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleInfoField::valid_dataFieldName
		),
		::DdsJs::BooleanField::FromCppToJsValue(
			cppValue.valid_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SampleInfo
bool SampleInfoField::FromJsValueToCpp(Local<Value> jsVal, SampleInfoField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_sample_stateFieldName =
		Local<String>::New(isolate,
			SampleInfoField::sample_stateFieldName);
	Local<String> l_view_stateFieldName =
		Local<String>::New(isolate,
			SampleInfoField::view_stateFieldName);
	Local<String> l_instance_stateFieldName =
		Local<String>::New(isolate,
			SampleInfoField::instance_stateFieldName);
	Local<String> l_instance_handleFieldName =
		Local<String>::New(isolate,
			SampleInfoField::instance_handleFieldName);
	Local<String> l_publication_handleFieldName =
		Local<String>::New(isolate,
			SampleInfoField::publication_handleFieldName);
	Local<String> l_disposed_generation_countFieldName =
		Local<String>::New(isolate,
			SampleInfoField::disposed_generation_countFieldName);
	Local<String> l_no_writers_generation_countFieldName =
		Local<String>::New(isolate,
			SampleInfoField::no_writers_generation_countFieldName);
	Local<String> l_sample_rankFieldName =
		Local<String>::New(isolate,
			SampleInfoField::sample_rankFieldName);
	Local<String> l_generation_rankFieldName =
		Local<String>::New(isolate,
			SampleInfoField::generation_rankFieldName);
	Local<String> l_absolute_generation_rankFieldName =
		Local<String>::New(isolate,
			SampleInfoField::absolute_generation_rankFieldName);
	Local<String> l_valid_dataFieldName =
		Local<String>::New(isolate,
			SampleInfoField::valid_dataFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_sample_stateFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.sample_state);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_view_stateFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.view_state);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_instance_stateFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.instance_state);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_instance_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.instance_handle);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_publication_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.publication_handle);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_disposed_generation_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.disposed_generation_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_no_writers_generation_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.no_writers_generation_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_sample_rankFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.sample_rank);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_generation_rankFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.generation_rank);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_absolute_generation_rankFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.absolute_generation_rank);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valid_dataFieldName)).IsEmpty() &&
		::DdsJs::BooleanField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.valid_data);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: PresentationQosPolicy
// ======================================================
// Field names for topic PresentationQosPolicy
Persistent<String> PresentationQosPolicyField::access_scopeFieldName;
Persistent<String> PresentationQosPolicyField::coherent_accessFieldName;
Persistent<String> PresentationQosPolicyField::ordered_accessFieldName;

// Initialization of topic PresentationQosPolicy field type.
void PresentationQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		PresentationQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PresentationQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	PresentationQosPolicyField::access_scopeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "access_scope"));
	PresentationQosPolicyField::coherent_accessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "coherent_access"));
	PresentationQosPolicyField::ordered_accessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ordered_access"));

}

// New instance of topic PresentationQosPolicy field type.
void PresentationQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		PresentationQosPolicyField::FromCppToJsValue(
			PresentationQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic PresentationQosPolicy
Local<Value> PresentationQosPolicyField::FromCppToJsValue(PresentationQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PresentationQosPolicyField::access_scopeFieldName
		),
		::DDS::PresentationQosPolicyAccessScopeKindField::FromCppToJsValue(
			cppValue.access_scope
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PresentationQosPolicyField::coherent_accessFieldName
		),
		::DdsJs::BooleanField::FromCppToJsValue(
			cppValue.coherent_access
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PresentationQosPolicyField::ordered_accessFieldName
		),
		::DdsJs::BooleanField::FromCppToJsValue(
			cppValue.ordered_access
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic PresentationQosPolicy
bool PresentationQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, PresentationQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_access_scopeFieldName =
		Local<String>::New(isolate,
			PresentationQosPolicyField::access_scopeFieldName);
	Local<String> l_coherent_accessFieldName =
		Local<String>::New(isolate,
			PresentationQosPolicyField::coherent_accessFieldName);
	Local<String> l_ordered_accessFieldName =
		Local<String>::New(isolate,
			PresentationQosPolicyField::ordered_accessFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_access_scopeFieldName)).IsEmpty() &&
		::DDS::PresentationQosPolicyAccessScopeKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.access_scope);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_coherent_accessFieldName)).IsEmpty() &&
		::DdsJs::BooleanField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.coherent_access);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ordered_accessFieldName)).IsEmpty() &&
		::DdsJs::BooleanField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ordered_access);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: Duration_t
// ======================================================
// Field names for topic Duration_t
Persistent<String> Duration_tField::secFieldName;
Persistent<String> Duration_tField::nanosecFieldName;

// Initialization of topic Duration_t field type.
void Duration_tField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		Duration_tField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "Duration_t"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	Duration_tField::secFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "sec"));
	Duration_tField::nanosecFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "nanosec"));

}

// New instance of topic Duration_t field type.
void Duration_tField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		Duration_tField::FromCppToJsValue(
			Duration_tField::ValueType()));
}

// From C++ to JavaScript for topic Duration_t
Local<Value> Duration_tField::FromCppToJsValue(Duration_tField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			Duration_tField::secFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.sec
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			Duration_tField::nanosecFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.nanosec
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic Duration_t
bool Duration_tField::FromJsValueToCpp(Local<Value> jsVal, Duration_tField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_secFieldName =
		Local<String>::New(isolate,
			Duration_tField::secFieldName);
	Local<String> l_nanosecFieldName =
		Local<String>::New(isolate,
			Duration_tField::nanosecFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_secFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.sec);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_nanosecFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.nanosec);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: LivelinessLostStatus
// ======================================================
// Field names for topic LivelinessLostStatus
Persistent<String> LivelinessLostStatusField::total_countFieldName;
Persistent<String> LivelinessLostStatusField::total_count_changeFieldName;

// Initialization of topic LivelinessLostStatus field type.
void LivelinessLostStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		LivelinessLostStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LivelinessLostStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	LivelinessLostStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	LivelinessLostStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));

}

// New instance of topic LivelinessLostStatus field type.
void LivelinessLostStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		LivelinessLostStatusField::FromCppToJsValue(
			LivelinessLostStatusField::ValueType()));
}

// From C++ to JavaScript for topic LivelinessLostStatus
Local<Value> LivelinessLostStatusField::FromCppToJsValue(LivelinessLostStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessLostStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessLostStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic LivelinessLostStatus
bool LivelinessLostStatusField::FromJsValueToCpp(Local<Value> jsVal, LivelinessLostStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			LivelinessLostStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			LivelinessLostStatusField::total_count_changeFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: PublisherQos
// ======================================================
// Field names for topic PublisherQos
Persistent<String> PublisherQosField::presentationFieldName;
Persistent<String> PublisherQosField::partitionFieldName;
Persistent<String> PublisherQosField::group_dataFieldName;
Persistent<String> PublisherQosField::entity_factoryFieldName;

// Initialization of topic PublisherQos field type.
void PublisherQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		PublisherQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PublisherQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	PublisherQosField::presentationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "presentation"));
	PublisherQosField::partitionFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "partition"));
	PublisherQosField::group_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "group_data"));
	PublisherQosField::entity_factoryFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "entity_factory"));

}

// New instance of topic PublisherQos field type.
void PublisherQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		PublisherQosField::FromCppToJsValue(
			PublisherQosField::ValueType()));
}

// From C++ to JavaScript for topic PublisherQos
Local<Value> PublisherQosField::FromCppToJsValue(PublisherQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublisherQosField::presentationFieldName
		),
		::DDS::PresentationQosPolicyField::FromCppToJsValue(
			cppValue.presentation
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublisherQosField::partitionFieldName
		),
		::DDS::PartitionQosPolicyField::FromCppToJsValue(
			cppValue.partition
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublisherQosField::group_dataFieldName
		),
		::DDS::GroupDataQosPolicyField::FromCppToJsValue(
			cppValue.group_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublisherQosField::entity_factoryFieldName
		),
		::DDS::EntityFactoryQosPolicyField::FromCppToJsValue(
			cppValue.entity_factory
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic PublisherQos
bool PublisherQosField::FromJsValueToCpp(Local<Value> jsVal, PublisherQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_presentationFieldName =
		Local<String>::New(isolate,
			PublisherQosField::presentationFieldName);
	Local<String> l_partitionFieldName =
		Local<String>::New(isolate,
			PublisherQosField::partitionFieldName);
	Local<String> l_group_dataFieldName =
		Local<String>::New(isolate,
			PublisherQosField::group_dataFieldName);
	Local<String> l_entity_factoryFieldName =
		Local<String>::New(isolate,
			PublisherQosField::entity_factoryFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_presentationFieldName)).IsEmpty() &&
		::DDS::PresentationQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.presentation);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_partitionFieldName)).IsEmpty() &&
		::DDS::PartitionQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.partition);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_group_dataFieldName)).IsEmpty() &&
		::DDS::GroupDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.group_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_entity_factoryFieldName)).IsEmpty() &&
		::DDS::EntityFactoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.entity_factory);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DataReaderQos
// ======================================================
// Field names for topic DataReaderQos
Persistent<String> DataReaderQosField::durabilityFieldName;
Persistent<String> DataReaderQosField::deadlineFieldName;
Persistent<String> DataReaderQosField::latency_budgetFieldName;
Persistent<String> DataReaderQosField::livelinessFieldName;
Persistent<String> DataReaderQosField::reliabilityFieldName;
Persistent<String> DataReaderQosField::destination_orderFieldName;
Persistent<String> DataReaderQosField::historyFieldName;
Persistent<String> DataReaderQosField::resource_limitsFieldName;
Persistent<String> DataReaderQosField::user_dataFieldName;
Persistent<String> DataReaderQosField::ownershipFieldName;
Persistent<String> DataReaderQosField::time_based_filterFieldName;
Persistent<String> DataReaderQosField::reader_data_lifecycleFieldName;

// Initialization of topic DataReaderQos field type.
void DataReaderQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DataReaderQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DataReaderQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DataReaderQosField::durabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability"));
	DataReaderQosField::deadlineFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "deadline"));
	DataReaderQosField::latency_budgetFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "latency_budget"));
	DataReaderQosField::livelinessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "liveliness"));
	DataReaderQosField::reliabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reliability"));
	DataReaderQosField::destination_orderFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "destination_order"));
	DataReaderQosField::historyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "history"));
	DataReaderQosField::resource_limitsFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "resource_limits"));
	DataReaderQosField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));
	DataReaderQosField::ownershipFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership"));
	DataReaderQosField::time_based_filterFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "time_based_filter"));
	DataReaderQosField::reader_data_lifecycleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reader_data_lifecycle"));

}

// New instance of topic DataReaderQos field type.
void DataReaderQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DataReaderQosField::FromCppToJsValue(
			DataReaderQosField::ValueType()));
}

// From C++ to JavaScript for topic DataReaderQos
Local<Value> DataReaderQosField::FromCppToJsValue(DataReaderQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::durabilityFieldName
		),
		::DDS::DurabilityQosPolicyField::FromCppToJsValue(
			cppValue.durability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::deadlineFieldName
		),
		::DDS::DeadlineQosPolicyField::FromCppToJsValue(
			cppValue.deadline
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::latency_budgetFieldName
		),
		::DDS::LatencyBudgetQosPolicyField::FromCppToJsValue(
			cppValue.latency_budget
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::livelinessFieldName
		),
		::DDS::LivelinessQosPolicyField::FromCppToJsValue(
			cppValue.liveliness
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::reliabilityFieldName
		),
		::DDS::ReliabilityQosPolicyField::FromCppToJsValue(
			cppValue.reliability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::destination_orderFieldName
		),
		::DDS::DestinationOrderQosPolicyField::FromCppToJsValue(
			cppValue.destination_order
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::historyFieldName
		),
		::DDS::HistoryQosPolicyField::FromCppToJsValue(
			cppValue.history
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::resource_limitsFieldName
		),
		::DDS::ResourceLimitsQosPolicyField::FromCppToJsValue(
			cppValue.resource_limits
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::ownershipFieldName
		),
		::DDS::OwnershipQosPolicyField::FromCppToJsValue(
			cppValue.ownership
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::time_based_filterFieldName
		),
		::DDS::TimeBasedFilterQosPolicyField::FromCppToJsValue(
			cppValue.time_based_filter
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DataReaderQosField::reader_data_lifecycleFieldName
		),
		::DDS::ReaderDataLifecycleQosPolicyField::FromCppToJsValue(
			cppValue.reader_data_lifecycle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DataReaderQos
bool DataReaderQosField::FromJsValueToCpp(Local<Value> jsVal, DataReaderQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_durabilityFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::durabilityFieldName);
	Local<String> l_deadlineFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::deadlineFieldName);
	Local<String> l_latency_budgetFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::latency_budgetFieldName);
	Local<String> l_livelinessFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::livelinessFieldName);
	Local<String> l_reliabilityFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::reliabilityFieldName);
	Local<String> l_destination_orderFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::destination_orderFieldName);
	Local<String> l_historyFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::historyFieldName);
	Local<String> l_resource_limitsFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::resource_limitsFieldName);
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::user_dataFieldName);
	Local<String> l_ownershipFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::ownershipFieldName);
	Local<String> l_time_based_filterFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::time_based_filterFieldName);
	Local<String> l_reader_data_lifecycleFieldName =
		Local<String>::New(isolate,
			DataReaderQosField::reader_data_lifecycleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durabilityFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_deadlineFieldName)).IsEmpty() &&
		::DDS::DeadlineQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.deadline);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_latency_budgetFieldName)).IsEmpty() &&
		::DDS::LatencyBudgetQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.latency_budget);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_livelinessFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.liveliness);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reliabilityFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reliability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_destination_orderFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.destination_order);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_historyFieldName)).IsEmpty() &&
		::DDS::HistoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.history);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_resource_limitsFieldName)).IsEmpty() &&
		::DDS::ResourceLimitsQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.resource_limits);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownershipFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_time_based_filterFieldName)).IsEmpty() &&
		::DDS::TimeBasedFilterQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.time_based_filter);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reader_data_lifecycleFieldName)).IsEmpty() &&
		::DDS::ReaderDataLifecycleQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reader_data_lifecycle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DeadlineQosPolicy
// ======================================================
// Field names for topic DeadlineQosPolicy
Persistent<String> DeadlineQosPolicyField::periodFieldName;

// Initialization of topic DeadlineQosPolicy field type.
void DeadlineQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DeadlineQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DeadlineQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DeadlineQosPolicyField::periodFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "period"));

}

// New instance of topic DeadlineQosPolicy field type.
void DeadlineQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DeadlineQosPolicyField::FromCppToJsValue(
			DeadlineQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic DeadlineQosPolicy
Local<Value> DeadlineQosPolicyField::FromCppToJsValue(DeadlineQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DeadlineQosPolicyField::periodFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.period
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DeadlineQosPolicy
bool DeadlineQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, DeadlineQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_periodFieldName =
		Local<String>::New(isolate,
			DeadlineQosPolicyField::periodFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_periodFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.period);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: WriterDataLifecycleQosPolicy
// ======================================================
// Field names for topic WriterDataLifecycleQosPolicy
Persistent<String> WriterDataLifecycleQosPolicyField::autodispose_unregistered_instancesFieldName;

// Initialization of topic WriterDataLifecycleQosPolicy field type.
void WriterDataLifecycleQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		WriterDataLifecycleQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "WriterDataLifecycleQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	WriterDataLifecycleQosPolicyField::autodispose_unregistered_instancesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "autodispose_unregistered_instances"));

}

// New instance of topic WriterDataLifecycleQosPolicy field type.
void WriterDataLifecycleQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		WriterDataLifecycleQosPolicyField::FromCppToJsValue(
			WriterDataLifecycleQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic WriterDataLifecycleQosPolicy
Local<Value> WriterDataLifecycleQosPolicyField::FromCppToJsValue(WriterDataLifecycleQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			WriterDataLifecycleQosPolicyField::autodispose_unregistered_instancesFieldName
		),
		::DdsJs::BooleanField::FromCppToJsValue(
			cppValue.autodispose_unregistered_instances
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic WriterDataLifecycleQosPolicy
bool WriterDataLifecycleQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, WriterDataLifecycleQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_autodispose_unregistered_instancesFieldName =
		Local<String>::New(isolate,
			WriterDataLifecycleQosPolicyField::autodispose_unregistered_instancesFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_autodispose_unregistered_instancesFieldName)).IsEmpty() &&
		::DdsJs::BooleanField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.autodispose_unregistered_instances);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: LivelinessQosPolicy
// ======================================================
// Field names for topic LivelinessQosPolicy
Persistent<String> LivelinessQosPolicyField::kindFieldName;
Persistent<String> LivelinessQosPolicyField::lease_durationFieldName;

// Initialization of topic LivelinessQosPolicy field type.
void LivelinessQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		LivelinessQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LivelinessQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	LivelinessQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));
	LivelinessQosPolicyField::lease_durationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "lease_duration"));

}

// New instance of topic LivelinessQosPolicy field type.
void LivelinessQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		LivelinessQosPolicyField::FromCppToJsValue(
			LivelinessQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic LivelinessQosPolicy
Local<Value> LivelinessQosPolicyField::FromCppToJsValue(LivelinessQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessQosPolicyField::kindFieldName
		),
		::DDS::LivelinessQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LivelinessQosPolicyField::lease_durationFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.lease_duration
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic LivelinessQosPolicy
bool LivelinessQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, LivelinessQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			LivelinessQosPolicyField::kindFieldName);
	Local<String> l_lease_durationFieldName =
		Local<String>::New(isolate,
			LivelinessQosPolicyField::lease_durationFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_lease_durationFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.lease_duration);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: PublicationBuiltinTopicData
// ======================================================
// Field names for topic PublicationBuiltinTopicData
Persistent<String> PublicationBuiltinTopicDataField::keyFieldName;
Persistent<String> PublicationBuiltinTopicDataField::participant_keyFieldName;
Persistent<String> PublicationBuiltinTopicDataField::topic_nameFieldName;
Persistent<String> PublicationBuiltinTopicDataField::type_nameFieldName;
Persistent<String> PublicationBuiltinTopicDataField::durabilityFieldName;
Persistent<String> PublicationBuiltinTopicDataField::durability_serviceFieldName;
Persistent<String> PublicationBuiltinTopicDataField::deadlineFieldName;
Persistent<String> PublicationBuiltinTopicDataField::latency_budgetFieldName;
Persistent<String> PublicationBuiltinTopicDataField::livelinessFieldName;
Persistent<String> PublicationBuiltinTopicDataField::reliabilityFieldName;
Persistent<String> PublicationBuiltinTopicDataField::lifespanFieldName;
Persistent<String> PublicationBuiltinTopicDataField::user_dataFieldName;
Persistent<String> PublicationBuiltinTopicDataField::ownershipFieldName;
Persistent<String> PublicationBuiltinTopicDataField::ownership_strengthFieldName;
Persistent<String> PublicationBuiltinTopicDataField::destination_orderFieldName;
Persistent<String> PublicationBuiltinTopicDataField::presentationFieldName;
Persistent<String> PublicationBuiltinTopicDataField::partitionFieldName;
Persistent<String> PublicationBuiltinTopicDataField::topic_dataFieldName;
Persistent<String> PublicationBuiltinTopicDataField::group_dataFieldName;

// Initialization of topic PublicationBuiltinTopicData field type.
void PublicationBuiltinTopicDataField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		PublicationBuiltinTopicDataField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PublicationBuiltinTopicData"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	PublicationBuiltinTopicDataField::keyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "key"));
	PublicationBuiltinTopicDataField::participant_keyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "participant_key"));
	PublicationBuiltinTopicDataField::topic_nameFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "topic_name"));
	PublicationBuiltinTopicDataField::type_nameFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "type_name"));
	PublicationBuiltinTopicDataField::durabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability"));
	PublicationBuiltinTopicDataField::durability_serviceFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability_service"));
	PublicationBuiltinTopicDataField::deadlineFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "deadline"));
	PublicationBuiltinTopicDataField::latency_budgetFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "latency_budget"));
	PublicationBuiltinTopicDataField::livelinessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "liveliness"));
	PublicationBuiltinTopicDataField::reliabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reliability"));
	PublicationBuiltinTopicDataField::lifespanFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "lifespan"));
	PublicationBuiltinTopicDataField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));
	PublicationBuiltinTopicDataField::ownershipFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership"));
	PublicationBuiltinTopicDataField::ownership_strengthFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership_strength"));
	PublicationBuiltinTopicDataField::destination_orderFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "destination_order"));
	PublicationBuiltinTopicDataField::presentationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "presentation"));
	PublicationBuiltinTopicDataField::partitionFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "partition"));
	PublicationBuiltinTopicDataField::topic_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "topic_data"));
	PublicationBuiltinTopicDataField::group_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "group_data"));

}

// New instance of topic PublicationBuiltinTopicData field type.
void PublicationBuiltinTopicDataField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		PublicationBuiltinTopicDataField::FromCppToJsValue(
			PublicationBuiltinTopicDataField::ValueType()));
}

// From C++ to JavaScript for topic PublicationBuiltinTopicData
Local<Value> PublicationBuiltinTopicDataField::FromCppToJsValue(PublicationBuiltinTopicDataField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::keyFieldName
		),
		::DDS::BuiltinTopicKey_tField::FromCppToJsValue(
			cppValue.key
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::participant_keyFieldName
		),
		::DDS::BuiltinTopicKey_tField::FromCppToJsValue(
			cppValue.participant_key
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::topic_nameFieldName
		),
		::DdsJs::UnboundedStringField::FromCppToJsValue(
			cppValue.topic_name
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::type_nameFieldName
		),
		::DdsJs::UnboundedStringField::FromCppToJsValue(
			cppValue.type_name
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::durabilityFieldName
		),
		::DDS::DurabilityQosPolicyField::FromCppToJsValue(
			cppValue.durability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::durability_serviceFieldName
		),
		::DDS::DurabilityServiceQosPolicyField::FromCppToJsValue(
			cppValue.durability_service
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::deadlineFieldName
		),
		::DDS::DeadlineQosPolicyField::FromCppToJsValue(
			cppValue.deadline
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::latency_budgetFieldName
		),
		::DDS::LatencyBudgetQosPolicyField::FromCppToJsValue(
			cppValue.latency_budget
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::livelinessFieldName
		),
		::DDS::LivelinessQosPolicyField::FromCppToJsValue(
			cppValue.liveliness
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::reliabilityFieldName
		),
		::DDS::ReliabilityQosPolicyField::FromCppToJsValue(
			cppValue.reliability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::lifespanFieldName
		),
		::DDS::LifespanQosPolicyField::FromCppToJsValue(
			cppValue.lifespan
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::ownershipFieldName
		),
		::DDS::OwnershipQosPolicyField::FromCppToJsValue(
			cppValue.ownership
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::ownership_strengthFieldName
		),
		::DDS::OwnershipStrengthQosPolicyField::FromCppToJsValue(
			cppValue.ownership_strength
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::destination_orderFieldName
		),
		::DDS::DestinationOrderQosPolicyField::FromCppToJsValue(
			cppValue.destination_order
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::presentationFieldName
		),
		::DDS::PresentationQosPolicyField::FromCppToJsValue(
			cppValue.presentation
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::partitionFieldName
		),
		::DDS::PartitionQosPolicyField::FromCppToJsValue(
			cppValue.partition
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::topic_dataFieldName
		),
		::DDS::TopicDataQosPolicyField::FromCppToJsValue(
			cppValue.topic_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationBuiltinTopicDataField::group_dataFieldName
		),
		::DDS::GroupDataQosPolicyField::FromCppToJsValue(
			cppValue.group_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic PublicationBuiltinTopicData
bool PublicationBuiltinTopicDataField::FromJsValueToCpp(Local<Value> jsVal, PublicationBuiltinTopicDataField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_keyFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::keyFieldName);
	Local<String> l_participant_keyFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::participant_keyFieldName);
	Local<String> l_topic_nameFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::topic_nameFieldName);
	Local<String> l_type_nameFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::type_nameFieldName);
	Local<String> l_durabilityFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::durabilityFieldName);
	Local<String> l_durability_serviceFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::durability_serviceFieldName);
	Local<String> l_deadlineFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::deadlineFieldName);
	Local<String> l_latency_budgetFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::latency_budgetFieldName);
	Local<String> l_livelinessFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::livelinessFieldName);
	Local<String> l_reliabilityFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::reliabilityFieldName);
	Local<String> l_lifespanFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::lifespanFieldName);
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::user_dataFieldName);
	Local<String> l_ownershipFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::ownershipFieldName);
	Local<String> l_ownership_strengthFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::ownership_strengthFieldName);
	Local<String> l_destination_orderFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::destination_orderFieldName);
	Local<String> l_presentationFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::presentationFieldName);
	Local<String> l_partitionFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::partitionFieldName);
	Local<String> l_topic_dataFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::topic_dataFieldName);
	Local<String> l_group_dataFieldName =
		Local<String>::New(isolate,
			PublicationBuiltinTopicDataField::group_dataFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_keyFieldName)).IsEmpty() &&
		::DDS::BuiltinTopicKey_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.key);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_participant_keyFieldName)).IsEmpty() &&
		::DDS::BuiltinTopicKey_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.participant_key);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_topic_nameFieldName)).IsEmpty() &&
		::DdsJs::UnboundedStringField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.topic_name);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_type_nameFieldName)).IsEmpty() &&
		::DdsJs::UnboundedStringField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.type_name);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durabilityFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durability_serviceFieldName)).IsEmpty() &&
		::DDS::DurabilityServiceQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability_service);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_deadlineFieldName)).IsEmpty() &&
		::DDS::DeadlineQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.deadline);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_latency_budgetFieldName)).IsEmpty() &&
		::DDS::LatencyBudgetQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.latency_budget);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_livelinessFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.liveliness);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reliabilityFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reliability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_lifespanFieldName)).IsEmpty() &&
		::DDS::LifespanQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.lifespan);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownershipFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownership_strengthFieldName)).IsEmpty() &&
		::DDS::OwnershipStrengthQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership_strength);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_destination_orderFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.destination_order);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_presentationFieldName)).IsEmpty() &&
		::DDS::PresentationQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.presentation);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_partitionFieldName)).IsEmpty() &&
		::DDS::PartitionQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.partition);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_topic_dataFieldName)).IsEmpty() &&
		::DDS::TopicDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.topic_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_group_dataFieldName)).IsEmpty() &&
		::DDS::GroupDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.group_data);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DestinationOrderQosPolicy
// ======================================================
// Field names for topic DestinationOrderQosPolicy
Persistent<String> DestinationOrderQosPolicyField::kindFieldName;

// Initialization of topic DestinationOrderQosPolicy field type.
void DestinationOrderQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DestinationOrderQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DestinationOrderQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DestinationOrderQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));

}

// New instance of topic DestinationOrderQosPolicy field type.
void DestinationOrderQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DestinationOrderQosPolicyField::FromCppToJsValue(
			DestinationOrderQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic DestinationOrderQosPolicy
Local<Value> DestinationOrderQosPolicyField::FromCppToJsValue(DestinationOrderQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DestinationOrderQosPolicyField::kindFieldName
		),
		::DDS::DestinationOrderQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DestinationOrderQosPolicy
bool DestinationOrderQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, DestinationOrderQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			DestinationOrderQosPolicyField::kindFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SubscriptionBuiltinTopicData
// ======================================================
// Field names for topic SubscriptionBuiltinTopicData
Persistent<String> SubscriptionBuiltinTopicDataField::keyFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::participant_keyFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::topic_nameFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::type_nameFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::durabilityFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::deadlineFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::latency_budgetFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::livelinessFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::reliabilityFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::ownershipFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::destination_orderFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::user_dataFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::time_based_filterFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::presentationFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::partitionFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::topic_dataFieldName;
Persistent<String> SubscriptionBuiltinTopicDataField::group_dataFieldName;

// Initialization of topic SubscriptionBuiltinTopicData field type.
void SubscriptionBuiltinTopicDataField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SubscriptionBuiltinTopicDataField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SubscriptionBuiltinTopicData"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SubscriptionBuiltinTopicDataField::keyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "key"));
	SubscriptionBuiltinTopicDataField::participant_keyFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "participant_key"));
	SubscriptionBuiltinTopicDataField::topic_nameFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "topic_name"));
	SubscriptionBuiltinTopicDataField::type_nameFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "type_name"));
	SubscriptionBuiltinTopicDataField::durabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "durability"));
	SubscriptionBuiltinTopicDataField::deadlineFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "deadline"));
	SubscriptionBuiltinTopicDataField::latency_budgetFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "latency_budget"));
	SubscriptionBuiltinTopicDataField::livelinessFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "liveliness"));
	SubscriptionBuiltinTopicDataField::reliabilityFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "reliability"));
	SubscriptionBuiltinTopicDataField::ownershipFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "ownership"));
	SubscriptionBuiltinTopicDataField::destination_orderFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "destination_order"));
	SubscriptionBuiltinTopicDataField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));
	SubscriptionBuiltinTopicDataField::time_based_filterFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "time_based_filter"));
	SubscriptionBuiltinTopicDataField::presentationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "presentation"));
	SubscriptionBuiltinTopicDataField::partitionFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "partition"));
	SubscriptionBuiltinTopicDataField::topic_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "topic_data"));
	SubscriptionBuiltinTopicDataField::group_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "group_data"));

}

// New instance of topic SubscriptionBuiltinTopicData field type.
void SubscriptionBuiltinTopicDataField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SubscriptionBuiltinTopicDataField::FromCppToJsValue(
			SubscriptionBuiltinTopicDataField::ValueType()));
}

// From C++ to JavaScript for topic SubscriptionBuiltinTopicData
Local<Value> SubscriptionBuiltinTopicDataField::FromCppToJsValue(SubscriptionBuiltinTopicDataField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::keyFieldName
		),
		::DDS::BuiltinTopicKey_tField::FromCppToJsValue(
			cppValue.key
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::participant_keyFieldName
		),
		::DDS::BuiltinTopicKey_tField::FromCppToJsValue(
			cppValue.participant_key
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::topic_nameFieldName
		),
		::DdsJs::UnboundedStringField::FromCppToJsValue(
			cppValue.topic_name
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::type_nameFieldName
		),
		::DdsJs::UnboundedStringField::FromCppToJsValue(
			cppValue.type_name
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::durabilityFieldName
		),
		::DDS::DurabilityQosPolicyField::FromCppToJsValue(
			cppValue.durability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::deadlineFieldName
		),
		::DDS::DeadlineQosPolicyField::FromCppToJsValue(
			cppValue.deadline
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::latency_budgetFieldName
		),
		::DDS::LatencyBudgetQosPolicyField::FromCppToJsValue(
			cppValue.latency_budget
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::livelinessFieldName
		),
		::DDS::LivelinessQosPolicyField::FromCppToJsValue(
			cppValue.liveliness
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::reliabilityFieldName
		),
		::DDS::ReliabilityQosPolicyField::FromCppToJsValue(
			cppValue.reliability
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::ownershipFieldName
		),
		::DDS::OwnershipQosPolicyField::FromCppToJsValue(
			cppValue.ownership
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::destination_orderFieldName
		),
		::DDS::DestinationOrderQosPolicyField::FromCppToJsValue(
			cppValue.destination_order
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::time_based_filterFieldName
		),
		::DDS::TimeBasedFilterQosPolicyField::FromCppToJsValue(
			cppValue.time_based_filter
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::presentationFieldName
		),
		::DDS::PresentationQosPolicyField::FromCppToJsValue(
			cppValue.presentation
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::partitionFieldName
		),
		::DDS::PartitionQosPolicyField::FromCppToJsValue(
			cppValue.partition
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::topic_dataFieldName
		),
		::DDS::TopicDataQosPolicyField::FromCppToJsValue(
			cppValue.topic_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionBuiltinTopicDataField::group_dataFieldName
		),
		::DDS::GroupDataQosPolicyField::FromCppToJsValue(
			cppValue.group_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SubscriptionBuiltinTopicData
bool SubscriptionBuiltinTopicDataField::FromJsValueToCpp(Local<Value> jsVal, SubscriptionBuiltinTopicDataField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_keyFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::keyFieldName);
	Local<String> l_participant_keyFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::participant_keyFieldName);
	Local<String> l_topic_nameFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::topic_nameFieldName);
	Local<String> l_type_nameFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::type_nameFieldName);
	Local<String> l_durabilityFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::durabilityFieldName);
	Local<String> l_deadlineFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::deadlineFieldName);
	Local<String> l_latency_budgetFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::latency_budgetFieldName);
	Local<String> l_livelinessFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::livelinessFieldName);
	Local<String> l_reliabilityFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::reliabilityFieldName);
	Local<String> l_ownershipFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::ownershipFieldName);
	Local<String> l_destination_orderFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::destination_orderFieldName);
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::user_dataFieldName);
	Local<String> l_time_based_filterFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::time_based_filterFieldName);
	Local<String> l_presentationFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::presentationFieldName);
	Local<String> l_partitionFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::partitionFieldName);
	Local<String> l_topic_dataFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::topic_dataFieldName);
	Local<String> l_group_dataFieldName =
		Local<String>::New(isolate,
			SubscriptionBuiltinTopicDataField::group_dataFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_keyFieldName)).IsEmpty() &&
		::DDS::BuiltinTopicKey_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.key);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_participant_keyFieldName)).IsEmpty() &&
		::DDS::BuiltinTopicKey_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.participant_key);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_topic_nameFieldName)).IsEmpty() &&
		::DdsJs::UnboundedStringField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.topic_name);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_type_nameFieldName)).IsEmpty() &&
		::DdsJs::UnboundedStringField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.type_name);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durabilityFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.durability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_deadlineFieldName)).IsEmpty() &&
		::DDS::DeadlineQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.deadline);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_latency_budgetFieldName)).IsEmpty() &&
		::DDS::LatencyBudgetQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.latency_budget);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_livelinessFieldName)).IsEmpty() &&
		::DDS::LivelinessQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.liveliness);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_reliabilityFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.reliability);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_ownershipFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.ownership);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_destination_orderFieldName)).IsEmpty() &&
		::DDS::DestinationOrderQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.destination_order);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_time_based_filterFieldName)).IsEmpty() &&
		::DDS::TimeBasedFilterQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.time_based_filter);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_presentationFieldName)).IsEmpty() &&
		::DDS::PresentationQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.presentation);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_partitionFieldName)).IsEmpty() &&
		::DDS::PartitionQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.partition);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_topic_dataFieldName)).IsEmpty() &&
		::DDS::TopicDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.topic_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_group_dataFieldName)).IsEmpty() &&
		::DDS::GroupDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.group_data);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DurabilityServiceQosPolicy
// ======================================================
// Field names for topic DurabilityServiceQosPolicy
Persistent<String> DurabilityServiceQosPolicyField::service_cleanup_delayFieldName;
Persistent<String> DurabilityServiceQosPolicyField::history_kindFieldName;
Persistent<String> DurabilityServiceQosPolicyField::history_depthFieldName;
Persistent<String> DurabilityServiceQosPolicyField::max_samplesFieldName;
Persistent<String> DurabilityServiceQosPolicyField::max_instancesFieldName;
Persistent<String> DurabilityServiceQosPolicyField::max_samples_per_instanceFieldName;

// Initialization of topic DurabilityServiceQosPolicy field type.
void DurabilityServiceQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DurabilityServiceQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DurabilityServiceQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DurabilityServiceQosPolicyField::service_cleanup_delayFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "service_cleanup_delay"));
	DurabilityServiceQosPolicyField::history_kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "history_kind"));
	DurabilityServiceQosPolicyField::history_depthFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "history_depth"));
	DurabilityServiceQosPolicyField::max_samplesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_samples"));
	DurabilityServiceQosPolicyField::max_instancesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_instances"));
	DurabilityServiceQosPolicyField::max_samples_per_instanceFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_samples_per_instance"));

}

// New instance of topic DurabilityServiceQosPolicy field type.
void DurabilityServiceQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DurabilityServiceQosPolicyField::FromCppToJsValue(
			DurabilityServiceQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic DurabilityServiceQosPolicy
Local<Value> DurabilityServiceQosPolicyField::FromCppToJsValue(DurabilityServiceQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::service_cleanup_delayFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.service_cleanup_delay
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::history_kindFieldName
		),
		::DDS::HistoryQosPolicyKindField::FromCppToJsValue(
			cppValue.history_kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::history_depthFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.history_depth
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::max_samplesFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_samples
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::max_instancesFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_instances
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityServiceQosPolicyField::max_samples_per_instanceFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_samples_per_instance
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DurabilityServiceQosPolicy
bool DurabilityServiceQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, DurabilityServiceQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_service_cleanup_delayFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::service_cleanup_delayFieldName);
	Local<String> l_history_kindFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::history_kindFieldName);
	Local<String> l_history_depthFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::history_depthFieldName);
	Local<String> l_max_samplesFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::max_samplesFieldName);
	Local<String> l_max_instancesFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::max_instancesFieldName);
	Local<String> l_max_samples_per_instanceFieldName =
		Local<String>::New(isolate,
			DurabilityServiceQosPolicyField::max_samples_per_instanceFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_service_cleanup_delayFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.service_cleanup_delay);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_history_kindFieldName)).IsEmpty() &&
		::DDS::HistoryQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.history_kind);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_history_depthFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.history_depth);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_samplesFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_samples);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_instancesFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_instances);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_samples_per_instanceFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_samples_per_instance);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SampleLostStatus
// ======================================================
// Field names for topic SampleLostStatus
Persistent<String> SampleLostStatusField::total_countFieldName;
Persistent<String> SampleLostStatusField::total_count_changeFieldName;

// Initialization of topic SampleLostStatus field type.
void SampleLostStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SampleLostStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SampleLostStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SampleLostStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	SampleLostStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));

}

// New instance of topic SampleLostStatus field type.
void SampleLostStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SampleLostStatusField::FromCppToJsValue(
			SampleLostStatusField::ValueType()));
}

// From C++ to JavaScript for topic SampleLostStatus
Local<Value> SampleLostStatusField::FromCppToJsValue(SampleLostStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleLostStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SampleLostStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SampleLostStatus
bool SampleLostStatusField::FromJsValueToCpp(Local<Value> jsVal, SampleLostStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			SampleLostStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			SampleLostStatusField::total_count_changeFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: LifespanQosPolicy
// ======================================================
// Field names for topic LifespanQosPolicy
Persistent<String> LifespanQosPolicyField::durationFieldName;

// Initialization of topic LifespanQosPolicy field type.
void LifespanQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		LifespanQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LifespanQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	LifespanQosPolicyField::durationFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "duration"));

}

// New instance of topic LifespanQosPolicy field type.
void LifespanQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		LifespanQosPolicyField::FromCppToJsValue(
			LifespanQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic LifespanQosPolicy
Local<Value> LifespanQosPolicyField::FromCppToJsValue(LifespanQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			LifespanQosPolicyField::durationFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.duration
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic LifespanQosPolicy
bool LifespanQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, LifespanQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_durationFieldName =
		Local<String>::New(isolate,
			LifespanQosPolicyField::durationFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_durationFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.duration);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: OwnershipQosPolicy
// ======================================================
// Field names for topic OwnershipQosPolicy
Persistent<String> OwnershipQosPolicyField::kindFieldName;

// Initialization of topic OwnershipQosPolicy field type.
void OwnershipQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		OwnershipQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OwnershipQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	OwnershipQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));

}

// New instance of topic OwnershipQosPolicy field type.
void OwnershipQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		OwnershipQosPolicyField::FromCppToJsValue(
			OwnershipQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic OwnershipQosPolicy
Local<Value> OwnershipQosPolicyField::FromCppToJsValue(OwnershipQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OwnershipQosPolicyField::kindFieldName
		),
		::DDS::OwnershipQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic OwnershipQosPolicy
bool OwnershipQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, OwnershipQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			OwnershipQosPolicyField::kindFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::OwnershipQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: PublicationMatchedStatus
// ======================================================
// Field names for topic PublicationMatchedStatus
Persistent<String> PublicationMatchedStatusField::total_countFieldName;
Persistent<String> PublicationMatchedStatusField::total_count_changeFieldName;
Persistent<String> PublicationMatchedStatusField::current_countFieldName;
Persistent<String> PublicationMatchedStatusField::current_count_changeFieldName;
Persistent<String> PublicationMatchedStatusField::last_subscription_handleFieldName;

// Initialization of topic PublicationMatchedStatus field type.
void PublicationMatchedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		PublicationMatchedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PublicationMatchedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	PublicationMatchedStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	PublicationMatchedStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	PublicationMatchedStatusField::current_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "current_count"));
	PublicationMatchedStatusField::current_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "current_count_change"));
	PublicationMatchedStatusField::last_subscription_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_subscription_handle"));

}

// New instance of topic PublicationMatchedStatus field type.
void PublicationMatchedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		PublicationMatchedStatusField::FromCppToJsValue(
			PublicationMatchedStatusField::ValueType()));
}

// From C++ to JavaScript for topic PublicationMatchedStatus
Local<Value> PublicationMatchedStatusField::FromCppToJsValue(PublicationMatchedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationMatchedStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationMatchedStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationMatchedStatusField::current_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.current_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationMatchedStatusField::current_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.current_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PublicationMatchedStatusField::last_subscription_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_subscription_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic PublicationMatchedStatus
bool PublicationMatchedStatusField::FromJsValueToCpp(Local<Value> jsVal, PublicationMatchedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			PublicationMatchedStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			PublicationMatchedStatusField::total_count_changeFieldName);
	Local<String> l_current_countFieldName =
		Local<String>::New(isolate,
			PublicationMatchedStatusField::current_countFieldName);
	Local<String> l_current_count_changeFieldName =
		Local<String>::New(isolate,
			PublicationMatchedStatusField::current_count_changeFieldName);
	Local<String> l_last_subscription_handleFieldName =
		Local<String>::New(isolate,
			PublicationMatchedStatusField::last_subscription_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_current_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.current_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_current_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.current_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_subscription_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_subscription_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: ResourceLimitsQosPolicy
// ======================================================
// Field names for topic ResourceLimitsQosPolicy
Persistent<String> ResourceLimitsQosPolicyField::max_samplesFieldName;
Persistent<String> ResourceLimitsQosPolicyField::max_instancesFieldName;
Persistent<String> ResourceLimitsQosPolicyField::max_samples_per_instanceFieldName;

// Initialization of topic ResourceLimitsQosPolicy field type.
void ResourceLimitsQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		ResourceLimitsQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ResourceLimitsQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	ResourceLimitsQosPolicyField::max_samplesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_samples"));
	ResourceLimitsQosPolicyField::max_instancesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_instances"));
	ResourceLimitsQosPolicyField::max_samples_per_instanceFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_samples_per_instance"));

}

// New instance of topic ResourceLimitsQosPolicy field type.
void ResourceLimitsQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		ResourceLimitsQosPolicyField::FromCppToJsValue(
			ResourceLimitsQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic ResourceLimitsQosPolicy
Local<Value> ResourceLimitsQosPolicyField::FromCppToJsValue(ResourceLimitsQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ResourceLimitsQosPolicyField::max_samplesFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_samples
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ResourceLimitsQosPolicyField::max_instancesFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_instances
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ResourceLimitsQosPolicyField::max_samples_per_instanceFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.max_samples_per_instance
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic ResourceLimitsQosPolicy
bool ResourceLimitsQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, ResourceLimitsQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_max_samplesFieldName =
		Local<String>::New(isolate,
			ResourceLimitsQosPolicyField::max_samplesFieldName);
	Local<String> l_max_instancesFieldName =
		Local<String>::New(isolate,
			ResourceLimitsQosPolicyField::max_instancesFieldName);
	Local<String> l_max_samples_per_instanceFieldName =
		Local<String>::New(isolate,
			ResourceLimitsQosPolicyField::max_samples_per_instanceFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_samplesFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_samples);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_instancesFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_instances);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_samples_per_instanceFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_samples_per_instance);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: RequestedDeadlineMissedStatus
// ======================================================
// Field names for topic RequestedDeadlineMissedStatus
Persistent<String> RequestedDeadlineMissedStatusField::total_countFieldName;
Persistent<String> RequestedDeadlineMissedStatusField::total_count_changeFieldName;
Persistent<String> RequestedDeadlineMissedStatusField::last_instance_handleFieldName;

// Initialization of topic RequestedDeadlineMissedStatus field type.
void RequestedDeadlineMissedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		RequestedDeadlineMissedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RequestedDeadlineMissedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	RequestedDeadlineMissedStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	RequestedDeadlineMissedStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	RequestedDeadlineMissedStatusField::last_instance_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_instance_handle"));

}

// New instance of topic RequestedDeadlineMissedStatus field type.
void RequestedDeadlineMissedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		RequestedDeadlineMissedStatusField::FromCppToJsValue(
			RequestedDeadlineMissedStatusField::ValueType()));
}

// From C++ to JavaScript for topic RequestedDeadlineMissedStatus
Local<Value> RequestedDeadlineMissedStatusField::FromCppToJsValue(RequestedDeadlineMissedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedDeadlineMissedStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedDeadlineMissedStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			RequestedDeadlineMissedStatusField::last_instance_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_instance_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic RequestedDeadlineMissedStatus
bool RequestedDeadlineMissedStatusField::FromJsValueToCpp(Local<Value> jsVal, RequestedDeadlineMissedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			RequestedDeadlineMissedStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			RequestedDeadlineMissedStatusField::total_count_changeFieldName);
	Local<String> l_last_instance_handleFieldName =
		Local<String>::New(isolate,
			RequestedDeadlineMissedStatusField::last_instance_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_instance_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_instance_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DomainParticipantFactoryQos
// ======================================================
// Field names for topic DomainParticipantFactoryQos
Persistent<String> DomainParticipantFactoryQosField::entity_factoryFieldName;

// Initialization of topic DomainParticipantFactoryQos field type.
void DomainParticipantFactoryQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DomainParticipantFactoryQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DomainParticipantFactoryQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DomainParticipantFactoryQosField::entity_factoryFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "entity_factory"));

}

// New instance of topic DomainParticipantFactoryQos field type.
void DomainParticipantFactoryQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DomainParticipantFactoryQosField::FromCppToJsValue(
			DomainParticipantFactoryQosField::ValueType()));
}

// From C++ to JavaScript for topic DomainParticipantFactoryQos
Local<Value> DomainParticipantFactoryQosField::FromCppToJsValue(DomainParticipantFactoryQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DomainParticipantFactoryQosField::entity_factoryFieldName
		),
		::DDS::EntityFactoryQosPolicyField::FromCppToJsValue(
			cppValue.entity_factory
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DomainParticipantFactoryQos
bool DomainParticipantFactoryQosField::FromJsValueToCpp(Local<Value> jsVal, DomainParticipantFactoryQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_entity_factoryFieldName =
		Local<String>::New(isolate,
			DomainParticipantFactoryQosField::entity_factoryFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_entity_factoryFieldName)).IsEmpty() &&
		::DDS::EntityFactoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.entity_factory);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: SubscriptionMatchedStatus
// ======================================================
// Field names for topic SubscriptionMatchedStatus
Persistent<String> SubscriptionMatchedStatusField::total_countFieldName;
Persistent<String> SubscriptionMatchedStatusField::total_count_changeFieldName;
Persistent<String> SubscriptionMatchedStatusField::current_countFieldName;
Persistent<String> SubscriptionMatchedStatusField::current_count_changeFieldName;
Persistent<String> SubscriptionMatchedStatusField::last_publication_handleFieldName;

// Initialization of topic SubscriptionMatchedStatus field type.
void SubscriptionMatchedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		SubscriptionMatchedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SubscriptionMatchedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	SubscriptionMatchedStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	SubscriptionMatchedStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	SubscriptionMatchedStatusField::current_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "current_count"));
	SubscriptionMatchedStatusField::current_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "current_count_change"));
	SubscriptionMatchedStatusField::last_publication_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_publication_handle"));

}

// New instance of topic SubscriptionMatchedStatus field type.
void SubscriptionMatchedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		SubscriptionMatchedStatusField::FromCppToJsValue(
			SubscriptionMatchedStatusField::ValueType()));
}

// From C++ to JavaScript for topic SubscriptionMatchedStatus
Local<Value> SubscriptionMatchedStatusField::FromCppToJsValue(SubscriptionMatchedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionMatchedStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionMatchedStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionMatchedStatusField::current_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.current_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionMatchedStatusField::current_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.current_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			SubscriptionMatchedStatusField::last_publication_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_publication_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic SubscriptionMatchedStatus
bool SubscriptionMatchedStatusField::FromJsValueToCpp(Local<Value> jsVal, SubscriptionMatchedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			SubscriptionMatchedStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			SubscriptionMatchedStatusField::total_count_changeFieldName);
	Local<String> l_current_countFieldName =
		Local<String>::New(isolate,
			SubscriptionMatchedStatusField::current_countFieldName);
	Local<String> l_current_count_changeFieldName =
		Local<String>::New(isolate,
			SubscriptionMatchedStatusField::current_count_changeFieldName);
	Local<String> l_last_publication_handleFieldName =
		Local<String>::New(isolate,
			SubscriptionMatchedStatusField::last_publication_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_current_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.current_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_current_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.current_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_publication_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_publication_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: ReliabilityQosPolicy
// ======================================================
// Field names for topic ReliabilityQosPolicy
Persistent<String> ReliabilityQosPolicyField::kindFieldName;
Persistent<String> ReliabilityQosPolicyField::max_blocking_timeFieldName;

// Initialization of topic ReliabilityQosPolicy field type.
void ReliabilityQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		ReliabilityQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ReliabilityQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	ReliabilityQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));
	ReliabilityQosPolicyField::max_blocking_timeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "max_blocking_time"));

}

// New instance of topic ReliabilityQosPolicy field type.
void ReliabilityQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		ReliabilityQosPolicyField::FromCppToJsValue(
			ReliabilityQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic ReliabilityQosPolicy
Local<Value> ReliabilityQosPolicyField::FromCppToJsValue(ReliabilityQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ReliabilityQosPolicyField::kindFieldName
		),
		::DDS::ReliabilityQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ReliabilityQosPolicyField::max_blocking_timeFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.max_blocking_time
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic ReliabilityQosPolicy
bool ReliabilityQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, ReliabilityQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			ReliabilityQosPolicyField::kindFieldName);
	Local<String> l_max_blocking_timeFieldName =
		Local<String>::New(isolate,
			ReliabilityQosPolicyField::max_blocking_timeFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::ReliabilityQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_max_blocking_timeFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.max_blocking_time);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: InconsistentTopicStatus
// ======================================================
// Field names for topic InconsistentTopicStatus
Persistent<String> InconsistentTopicStatusField::total_countFieldName;
Persistent<String> InconsistentTopicStatusField::total_count_changeFieldName;

// Initialization of topic InconsistentTopicStatus field type.
void InconsistentTopicStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		InconsistentTopicStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "InconsistentTopicStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	InconsistentTopicStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	InconsistentTopicStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));

}

// New instance of topic InconsistentTopicStatus field type.
void InconsistentTopicStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		InconsistentTopicStatusField::FromCppToJsValue(
			InconsistentTopicStatusField::ValueType()));
}

// From C++ to JavaScript for topic InconsistentTopicStatus
Local<Value> InconsistentTopicStatusField::FromCppToJsValue(InconsistentTopicStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			InconsistentTopicStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			InconsistentTopicStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic InconsistentTopicStatus
bool InconsistentTopicStatusField::FromJsValueToCpp(Local<Value> jsVal, InconsistentTopicStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			InconsistentTopicStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			InconsistentTopicStatusField::total_count_changeFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DurabilityQosPolicy
// ======================================================
// Field names for topic DurabilityQosPolicy
Persistent<String> DurabilityQosPolicyField::kindFieldName;

// Initialization of topic DurabilityQosPolicy field type.
void DurabilityQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DurabilityQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DurabilityQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DurabilityQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));

}

// New instance of topic DurabilityQosPolicy field type.
void DurabilityQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DurabilityQosPolicyField::FromCppToJsValue(
			DurabilityQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic DurabilityQosPolicy
Local<Value> DurabilityQosPolicyField::FromCppToJsValue(DurabilityQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DurabilityQosPolicyField::kindFieldName
		),
		::DDS::DurabilityQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DurabilityQosPolicy
bool DurabilityQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, DurabilityQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			DurabilityQosPolicyField::kindFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::DurabilityQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: ReaderDataLifecycleQosPolicy
// ======================================================
// Field names for topic ReaderDataLifecycleQosPolicy
Persistent<String> ReaderDataLifecycleQosPolicyField::autopurge_nowriter_samples_delayFieldName;
Persistent<String> ReaderDataLifecycleQosPolicyField::autopurge_disposed_samples_delayFieldName;

// Initialization of topic ReaderDataLifecycleQosPolicy field type.
void ReaderDataLifecycleQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		ReaderDataLifecycleQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ReaderDataLifecycleQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	ReaderDataLifecycleQosPolicyField::autopurge_nowriter_samples_delayFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "autopurge_nowriter_samples_delay"));
	ReaderDataLifecycleQosPolicyField::autopurge_disposed_samples_delayFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "autopurge_disposed_samples_delay"));

}

// New instance of topic ReaderDataLifecycleQosPolicy field type.
void ReaderDataLifecycleQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		ReaderDataLifecycleQosPolicyField::FromCppToJsValue(
			ReaderDataLifecycleQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic ReaderDataLifecycleQosPolicy
Local<Value> ReaderDataLifecycleQosPolicyField::FromCppToJsValue(ReaderDataLifecycleQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ReaderDataLifecycleQosPolicyField::autopurge_nowriter_samples_delayFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.autopurge_nowriter_samples_delay
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			ReaderDataLifecycleQosPolicyField::autopurge_disposed_samples_delayFieldName
		),
		::DDS::Duration_tField::FromCppToJsValue(
			cppValue.autopurge_disposed_samples_delay
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic ReaderDataLifecycleQosPolicy
bool ReaderDataLifecycleQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, ReaderDataLifecycleQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_autopurge_nowriter_samples_delayFieldName =
		Local<String>::New(isolate,
			ReaderDataLifecycleQosPolicyField::autopurge_nowriter_samples_delayFieldName);
	Local<String> l_autopurge_disposed_samples_delayFieldName =
		Local<String>::New(isolate,
			ReaderDataLifecycleQosPolicyField::autopurge_disposed_samples_delayFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_autopurge_nowriter_samples_delayFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.autopurge_nowriter_samples_delay);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_autopurge_disposed_samples_delayFieldName)).IsEmpty() &&
		::DDS::Duration_tField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.autopurge_disposed_samples_delay);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: UserDataQosPolicy
// ======================================================
// Field names for topic UserDataQosPolicy
Persistent<String> UserDataQosPolicyField::valueFieldName;

// Initialization of topic UserDataQosPolicy field type.
void UserDataQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		UserDataQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "UserDataQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	UserDataQosPolicyField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic UserDataQosPolicy field type.
void UserDataQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		UserDataQosPolicyField::FromCppToJsValue(
			UserDataQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic UserDataQosPolicy
Local<Value> UserDataQosPolicyField::FromCppToJsValue(UserDataQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			UserDataQosPolicyField::valueFieldName
		),
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic UserDataQosPolicy
bool UserDataQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, UserDataQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			UserDataQosPolicyField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: HistoryQosPolicy
// ======================================================
// Field names for topic HistoryQosPolicy
Persistent<String> HistoryQosPolicyField::kindFieldName;
Persistent<String> HistoryQosPolicyField::depthFieldName;

// Initialization of topic HistoryQosPolicy field type.
void HistoryQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		HistoryQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "HistoryQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	HistoryQosPolicyField::kindFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "kind"));
	HistoryQosPolicyField::depthFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "depth"));

}

// New instance of topic HistoryQosPolicy field type.
void HistoryQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		HistoryQosPolicyField::FromCppToJsValue(
			HistoryQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic HistoryQosPolicy
Local<Value> HistoryQosPolicyField::FromCppToJsValue(HistoryQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			HistoryQosPolicyField::kindFieldName
		),
		::DDS::HistoryQosPolicyKindField::FromCppToJsValue(
			cppValue.kind
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			HistoryQosPolicyField::depthFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.depth
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic HistoryQosPolicy
bool HistoryQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, HistoryQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_kindFieldName =
		Local<String>::New(isolate,
			HistoryQosPolicyField::kindFieldName);
	Local<String> l_depthFieldName =
		Local<String>::New(isolate,
			HistoryQosPolicyField::depthFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_kindFieldName)).IsEmpty() &&
		::DDS::HistoryQosPolicyKindField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.kind);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_depthFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.depth);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: QosPolicyCount
// ======================================================
// Field names for topic QosPolicyCount
Persistent<String> QosPolicyCountField::policy_idFieldName;
Persistent<String> QosPolicyCountField::countFieldName;

// Initialization of topic QosPolicyCount field type.
void QosPolicyCountField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		QosPolicyCountField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "QosPolicyCount"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	QosPolicyCountField::policy_idFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "policy_id"));
	QosPolicyCountField::countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "count"));

}

// New instance of topic QosPolicyCount field type.
void QosPolicyCountField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		QosPolicyCountField::FromCppToJsValue(
			QosPolicyCountField::ValueType()));
}

// From C++ to JavaScript for topic QosPolicyCount
Local<Value> QosPolicyCountField::FromCppToJsValue(QosPolicyCountField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			QosPolicyCountField::policy_idFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.policy_id
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			QosPolicyCountField::countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic QosPolicyCount
bool QosPolicyCountField::FromJsValueToCpp(Local<Value> jsVal, QosPolicyCountField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_policy_idFieldName =
		Local<String>::New(isolate,
			QosPolicyCountField::policy_idFieldName);
	Local<String> l_countFieldName =
		Local<String>::New(isolate,
			QosPolicyCountField::countFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_policy_idFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.policy_id);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.count);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: PartitionQosPolicy
// ======================================================
// Field names for topic PartitionQosPolicy
Persistent<String> PartitionQosPolicyField::nameFieldName;

// Initialization of topic PartitionQosPolicy field type.
void PartitionQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		PartitionQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PartitionQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	PartitionQosPolicyField::nameFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "name"));

}

// New instance of topic PartitionQosPolicy field type.
void PartitionQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		PartitionQosPolicyField::FromCppToJsValue(
			PartitionQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic PartitionQosPolicy
Local<Value> PartitionQosPolicyField::FromCppToJsValue(PartitionQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			PartitionQosPolicyField::nameFieldName
		),
		::DdsJs::UnboundedSeqField< ::DdsJs::UnboundedStringField >::FromCppToJsValue(
			cppValue.name
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic PartitionQosPolicy
bool PartitionQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, PartitionQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_nameFieldName =
		Local<String>::New(isolate,
			PartitionQosPolicyField::nameFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_nameFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DdsJs::UnboundedStringField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.name);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: BuiltinTopicKey_t
// ======================================================
// Field names for topic BuiltinTopicKey_t
Persistent<String> BuiltinTopicKey_tField::valueFieldName;

// Initialization of topic BuiltinTopicKey_t field type.
void BuiltinTopicKey_tField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		BuiltinTopicKey_tField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "BuiltinTopicKey_t"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	BuiltinTopicKey_tField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic BuiltinTopicKey_t field type.
void BuiltinTopicKey_tField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		BuiltinTopicKey_tField::FromCppToJsValue(
			BuiltinTopicKey_tField::ValueType()));
}

// From C++ to JavaScript for topic BuiltinTopicKey_t
Local<Value> BuiltinTopicKey_tField::FromCppToJsValue(BuiltinTopicKey_tField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			BuiltinTopicKey_tField::valueFieldName
		),
		::DdsJs::ArrayField< ::DdsJs::LongField, 3 >::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic BuiltinTopicKey_t
bool BuiltinTopicKey_tField::FromJsValueToCpp(Local<Value> jsVal, BuiltinTopicKey_tField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			BuiltinTopicKey_tField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::ArrayField< ::DdsJs::LongField, 3 >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: OfferedIncompatibleQosStatus
// ======================================================
// Field names for topic OfferedIncompatibleQosStatus
Persistent<String> OfferedIncompatibleQosStatusField::total_countFieldName;
Persistent<String> OfferedIncompatibleQosStatusField::total_count_changeFieldName;
Persistent<String> OfferedIncompatibleQosStatusField::last_policy_idFieldName;
Persistent<String> OfferedIncompatibleQosStatusField::policiesFieldName;

// Initialization of topic OfferedIncompatibleQosStatus field type.
void OfferedIncompatibleQosStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		OfferedIncompatibleQosStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OfferedIncompatibleQosStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	OfferedIncompatibleQosStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	OfferedIncompatibleQosStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	OfferedIncompatibleQosStatusField::last_policy_idFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_policy_id"));
	OfferedIncompatibleQosStatusField::policiesFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "policies"));

}

// New instance of topic OfferedIncompatibleQosStatus field type.
void OfferedIncompatibleQosStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		OfferedIncompatibleQosStatusField::FromCppToJsValue(
			OfferedIncompatibleQosStatusField::ValueType()));
}

// From C++ to JavaScript for topic OfferedIncompatibleQosStatus
Local<Value> OfferedIncompatibleQosStatusField::FromCppToJsValue(OfferedIncompatibleQosStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedIncompatibleQosStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedIncompatibleQosStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedIncompatibleQosStatusField::last_policy_idFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.last_policy_id
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedIncompatibleQosStatusField::policiesFieldName
		),
		::DdsJs::UnboundedSeqField< ::DDS::QosPolicyCountField >::FromCppToJsValue(
			cppValue.policies
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic OfferedIncompatibleQosStatus
bool OfferedIncompatibleQosStatusField::FromJsValueToCpp(Local<Value> jsVal, OfferedIncompatibleQosStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			OfferedIncompatibleQosStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			OfferedIncompatibleQosStatusField::total_count_changeFieldName);
	Local<String> l_last_policy_idFieldName =
		Local<String>::New(isolate,
			OfferedIncompatibleQosStatusField::last_policy_idFieldName);
	Local<String> l_policiesFieldName =
		Local<String>::New(isolate,
			OfferedIncompatibleQosStatusField::policiesFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_policy_idFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_policy_id);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_policiesFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DDS::QosPolicyCountField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.policies);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: OwnershipStrengthQosPolicy
// ======================================================
// Field names for topic OwnershipStrengthQosPolicy
Persistent<String> OwnershipStrengthQosPolicyField::valueFieldName;

// Initialization of topic OwnershipStrengthQosPolicy field type.
void OwnershipStrengthQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		OwnershipStrengthQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OwnershipStrengthQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	OwnershipStrengthQosPolicyField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic OwnershipStrengthQosPolicy field type.
void OwnershipStrengthQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		OwnershipStrengthQosPolicyField::FromCppToJsValue(
			OwnershipStrengthQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic OwnershipStrengthQosPolicy
Local<Value> OwnershipStrengthQosPolicyField::FromCppToJsValue(OwnershipStrengthQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OwnershipStrengthQosPolicyField::valueFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic OwnershipStrengthQosPolicy
bool OwnershipStrengthQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, OwnershipStrengthQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			OwnershipStrengthQosPolicyField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: GroupDataQosPolicy
// ======================================================
// Field names for topic GroupDataQosPolicy
Persistent<String> GroupDataQosPolicyField::valueFieldName;

// Initialization of topic GroupDataQosPolicy field type.
void GroupDataQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		GroupDataQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "GroupDataQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	GroupDataQosPolicyField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic GroupDataQosPolicy field type.
void GroupDataQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		GroupDataQosPolicyField::FromCppToJsValue(
			GroupDataQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic GroupDataQosPolicy
Local<Value> GroupDataQosPolicyField::FromCppToJsValue(GroupDataQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			GroupDataQosPolicyField::valueFieldName
		),
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic GroupDataQosPolicy
bool GroupDataQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, GroupDataQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			GroupDataQosPolicyField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: TopicDataQosPolicy
// ======================================================
// Field names for topic TopicDataQosPolicy
Persistent<String> TopicDataQosPolicyField::valueFieldName;

// Initialization of topic TopicDataQosPolicy field type.
void TopicDataQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		TopicDataQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TopicDataQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	TopicDataQosPolicyField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic TopicDataQosPolicy field type.
void TopicDataQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		TopicDataQosPolicyField::FromCppToJsValue(
			TopicDataQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic TopicDataQosPolicy
Local<Value> TopicDataQosPolicyField::FromCppToJsValue(TopicDataQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TopicDataQosPolicyField::valueFieldName
		),
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic TopicDataQosPolicy
bool TopicDataQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, TopicDataQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			TopicDataQosPolicyField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::UnboundedSeqField< ::DdsJs::OctetField >::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: DomainParticipantQos
// ======================================================
// Field names for topic DomainParticipantQos
Persistent<String> DomainParticipantQosField::user_dataFieldName;
Persistent<String> DomainParticipantQosField::entity_factoryFieldName;

// Initialization of topic DomainParticipantQos field type.
void DomainParticipantQosField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		DomainParticipantQosField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DomainParticipantQos"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	DomainParticipantQosField::user_dataFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "user_data"));
	DomainParticipantQosField::entity_factoryFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "entity_factory"));

}

// New instance of topic DomainParticipantQos field type.
void DomainParticipantQosField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		DomainParticipantQosField::FromCppToJsValue(
			DomainParticipantQosField::ValueType()));
}

// From C++ to JavaScript for topic DomainParticipantQos
Local<Value> DomainParticipantQosField::FromCppToJsValue(DomainParticipantQosField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DomainParticipantQosField::user_dataFieldName
		),
		::DDS::UserDataQosPolicyField::FromCppToJsValue(
			cppValue.user_data
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			DomainParticipantQosField::entity_factoryFieldName
		),
		::DDS::EntityFactoryQosPolicyField::FromCppToJsValue(
			cppValue.entity_factory
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic DomainParticipantQos
bool DomainParticipantQosField::FromJsValueToCpp(Local<Value> jsVal, DomainParticipantQosField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_user_dataFieldName =
		Local<String>::New(isolate,
			DomainParticipantQosField::user_dataFieldName);
	Local<String> l_entity_factoryFieldName =
		Local<String>::New(isolate,
			DomainParticipantQosField::entity_factoryFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_user_dataFieldName)).IsEmpty() &&
		::DDS::UserDataQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.user_data);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_entity_factoryFieldName)).IsEmpty() &&
		::DDS::EntityFactoryQosPolicyField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.entity_factory);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: OfferedDeadlineMissedStatus
// ======================================================
// Field names for topic OfferedDeadlineMissedStatus
Persistent<String> OfferedDeadlineMissedStatusField::total_countFieldName;
Persistent<String> OfferedDeadlineMissedStatusField::total_count_changeFieldName;
Persistent<String> OfferedDeadlineMissedStatusField::last_instance_handleFieldName;

// Initialization of topic OfferedDeadlineMissedStatus field type.
void OfferedDeadlineMissedStatusField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		OfferedDeadlineMissedStatusField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OfferedDeadlineMissedStatus"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	OfferedDeadlineMissedStatusField::total_countFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count"));
	OfferedDeadlineMissedStatusField::total_count_changeFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "total_count_change"));
	OfferedDeadlineMissedStatusField::last_instance_handleFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "last_instance_handle"));

}

// New instance of topic OfferedDeadlineMissedStatus field type.
void OfferedDeadlineMissedStatusField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		OfferedDeadlineMissedStatusField::FromCppToJsValue(
			OfferedDeadlineMissedStatusField::ValueType()));
}

// From C++ to JavaScript for topic OfferedDeadlineMissedStatus
Local<Value> OfferedDeadlineMissedStatusField::FromCppToJsValue(OfferedDeadlineMissedStatusField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedDeadlineMissedStatusField::total_countFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedDeadlineMissedStatusField::total_count_changeFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.total_count_change
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			OfferedDeadlineMissedStatusField::last_instance_handleFieldName
		),
		::DdsJs::UnsignedLongField::FromCppToJsValue(
			cppValue.last_instance_handle
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic OfferedDeadlineMissedStatus
bool OfferedDeadlineMissedStatusField::FromJsValueToCpp(Local<Value> jsVal, OfferedDeadlineMissedStatusField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_total_countFieldName =
		Local<String>::New(isolate,
			OfferedDeadlineMissedStatusField::total_countFieldName);
	Local<String> l_total_count_changeFieldName =
		Local<String>::New(isolate,
			OfferedDeadlineMissedStatusField::total_count_changeFieldName);
	Local<String> l_last_instance_handleFieldName =
		Local<String>::New(isolate,
			OfferedDeadlineMissedStatusField::last_instance_handleFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_countFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_total_count_changeFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.total_count_change);
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_last_instance_handleFieldName)).IsEmpty() &&
		::DdsJs::UnsignedLongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.last_instance_handle);


	return result;
}

// ======================================================
// TOPIC IMPLEMENTATION: TransportPriorityQosPolicy
// ======================================================
// Field names for topic TransportPriorityQosPolicy
Persistent<String> TransportPriorityQosPolicyField::valueFieldName;

// Initialization of topic TransportPriorityQosPolicy field type.
void TransportPriorityQosPolicyField::Init(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();

	auto ctorFunc = FunctionTemplate::New(
		isolate,
		TransportPriorityQosPolicyField::New
	);
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TransportPriorityQosPolicy"),
		ctorFunc->GetFunction()
	);
	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	TransportPriorityQosPolicyField::valueFieldName.Reset(isolate,
		String::NewFromUtf8(isolate, "value"));

}

// New instance of topic TransportPriorityQosPolicy field type.
void TransportPriorityQosPolicyField::New(FunctionCallbackInfo<Value> const& args)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	args.GetReturnValue().Set(
		TransportPriorityQosPolicyField::FromCppToJsValue(
			TransportPriorityQosPolicyField::ValueType()));
}

// From C++ to JavaScript for topic TransportPriorityQosPolicy
Local<Value> TransportPriorityQosPolicyField::FromCppToJsValue(TransportPriorityQosPolicyField::ConstRefType cppValue)
{
	Isolate *isolate = Isolate::GetCurrent();
	EscapableHandleScope scope(isolate);
	Local<Object> result(Object::New(isolate));
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	Maybe< bool > setResult = ::v8::Nothing< bool >();

	setResult = result->Set(
		ctx,
		Local<String>::New(
			isolate,
			TransportPriorityQosPolicyField::valueFieldName
		),
		::DdsJs::LongField::FromCppToJsValue(
			cppValue.value
		)
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: throw exception
	}

	return scope.Escape(result);
}

// From JavaScript to C++ for topic TransportPriorityQosPolicy
bool TransportPriorityQosPolicyField::FromJsValueToCpp(Local<Value> jsVal, TransportPriorityQosPolicyField::RefType cppValueRet)
{
	Isolate *isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);
	Local<Context> ctx = Local<Context>::New(isolate, isolate->GetCurrentContext());
	MaybeLocal<Object> jsObjMaybe;
	bool result = true;
	MaybeLocal<Value> fieldMaybe;
	Local<Object> jsObject;
	Local<String> l_valueFieldName =
		Local<String>::New(isolate,
			TransportPriorityQosPolicyField::valueFieldName);


	result = !(jsObjMaybe = jsVal->ToObject(ctx)).IsEmpty() &&
		!(jsObject = jsObjMaybe.FromMaybe(Local<Object>())).IsEmpty();
	result = result &&
		!(fieldMaybe = jsObject->Get(ctx, l_valueFieldName)).IsEmpty() &&
		::DdsJs::LongField::FromJsValueToCpp(fieldMaybe.FromMaybe(Local<Value>()), cppValueRet.value);


	return result;
}


// ======================================================
// MODULE INITIALIZATION: DDS
// ======================================================
void InitAll(Local<Object> exports)
{
	Isolate *isolate = Isolate::GetCurrent();
	Local<Object> moduleExports(Object::New(isolate));
	Maybe< bool > setResult = exports->Set(
		isolate->GetCurrentContext(),
		String::NewFromUtf8(
			isolate,
			"DDS"
		),
		moduleExports
	);

	if (!setResult.FromMaybe(false))
	{
		// TODO: Throw exception
	}

	//
	// Constant Expressions
	//
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_IMMUTABLE_POLICY"),
		Number::New(isolate, ::DDS::RETCODE_IMMUTABLE_POLICY),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "WRITERDATALIFECYCLE_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::WRITERDATALIFECYCLE_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LATENCYBUDGET_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::LATENCYBUDGET_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIVELINESS_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::LIVELINESS_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURABILITYSERVICE_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::DURABILITYSERVICE_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_OK"),
		Number::New(isolate, ::DDS::RETCODE_OK),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OWNERSHIP_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::OWNERSHIP_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RESOURCELIMITS_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::RESOURCELIMITS_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_INCONSISTENT_POLICY"),
		Number::New(isolate, ::DDS::RETCODE_INCONSISTENT_POLICY),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DATA_AVAILABLE_STATUS"),
		Number::New(isolate, ::DDS::DATA_AVAILABLE_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DEADLINE_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::DEADLINE_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SAMPLE_REJECTED_STATUS"),
		Number::New(isolate, ::DDS::SAMPLE_REJECTED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURATION_INFINITE_NSEC"),
		Number::New(isolate, ::DDS::DURATION_INFINITE_NSEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIVELINESS_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::LIVELINESS_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TRANSPORTPRIORITY_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::TRANSPORTPRIORITY_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NOT_ALIVE_DISPOSED_INSTANCE_STATE"),
		Number::New(isolate, ::DDS::NOT_ALIVE_DISPOSED_INSTANCE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DESTINATIONORDER_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::DESTINATIONORDER_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "GROUPDATA_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::GROUPDATA_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "USERDATA_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::USERDATA_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "READERDATALIFECYCLE_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::READERDATALIFECYCLE_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ANY_INSTANCE_STATE"),
		Number::New(isolate, ::DDS::ANY_INSTANCE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TIMEBASEDFILTER_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::TIMEBASEDFILTER_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_UNSUPPORTED"),
		Number::New(isolate, ::DDS::RETCODE_UNSUPPORTED),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIFESPAN_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::LIFESPAN_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_OUT_OF_RESOURCES"),
		Number::New(isolate, ::DDS::RETCODE_OUT_OF_RESOURCES),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_NOT_ENABLED"),
		Number::New(isolate, ::DDS::RETCODE_NOT_ENABLED),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "HISTORY_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::HISTORY_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RELIABILITY_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::RELIABILITY_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURATION_ZERO_SEC"),
		Number::New(isolate, ::DDS::DURATION_ZERO_SEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURABILITY_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::DURABILITY_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PRESENTATION_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::PRESENTATION_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ALIVE_INSTANCE_STATE"),
		Number::New(isolate, ::DDS::ALIVE_INSTANCE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OFFERED_INCOMPATIBLE_QOS_STATUS"),
		Number::New(isolate, ::DDS::OFFERED_INCOMPATIBLE_QOS_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "HANDLE_NIL"),
		Number::New(isolate, ::DDS::HANDLE_NIL),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TIME_INVALID_SEC"),
		Number::New(isolate, ::DDS::TIME_INVALID_SEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "INVALID_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::INVALID_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OWNERSHIPSTRENGTH_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::OWNERSHIPSTRENGTH_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OFFERED_DEADLINE_MISSED_STATUS"),
		Number::New(isolate, ::DDS::OFFERED_DEADLINE_MISSED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PARTITION_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::PARTITION_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NOT_ALIVE_INSTANCE_STATE"),
		Number::New(isolate, ::DDS::NOT_ALIVE_INSTANCE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OWNERSHIPSTRENGTH_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::OWNERSHIPSTRENGTH_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TIME_INVALID_NSEC"),
		Number::New(isolate, ::DDS::TIME_INVALID_NSEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "INCONSISTENT_TOPIC_STATUS"),
		Number::New(isolate, ::DDS::INCONSISTENT_TOPIC_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SAMPLE_LOST_STATUS"),
		Number::New(isolate, ::DDS::SAMPLE_LOST_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NOT_NEW_VIEW_STATE"),
		Number::New(isolate, ::DDS::NOT_NEW_VIEW_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PRESENTATION_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::PRESENTATION_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DESTINATIONORDER_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::DESTINATIONORDER_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RESOURCELIMITS_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::RESOURCELIMITS_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURATION_ZERO_NSEC"),
		Number::New(isolate, ::DDS::DURATION_ZERO_NSEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DATA_ON_READERS_STATUS"),
		Number::New(isolate, ::DDS::DATA_ON_READERS_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "GROUPDATA_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::GROUPDATA_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIFESPAN_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::LIFESPAN_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "READERDATALIFECYCLE_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::READERDATALIFECYCLE_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "HISTORY_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::HISTORY_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ANY_SAMPLE_STATE"),
		Number::New(isolate, ::DDS::ANY_SAMPLE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TOPICDATA_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::TOPICDATA_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_ILLEGAL_OPERATION"),
		Number::New(isolate, ::DDS::RETCODE_ILLEGAL_OPERATION),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURABILITYSERVICE_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::DURABILITYSERVICE_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NOT_ALIVE_NO_WRITERS_INSTANCE_STATE"),
		Number::New(isolate, ::DDS::NOT_ALIVE_NO_WRITERS_INSTANCE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_BAD_PARAMETER"),
		Number::New(isolate, ::DDS::RETCODE_BAD_PARAMETER),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ENTITYFACTORY_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::ENTITYFACTORY_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DEADLINE_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::DEADLINE_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PUBLICATION_MATCHED_STATUS"),
		Number::New(isolate, ::DDS::PUBLICATION_MATCHED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIVELINESS_LOST_STATUS"),
		Number::New(isolate, ::DDS::LIVELINESS_LOST_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "PARTITION_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::PARTITION_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_ALREADY_DELETED"),
		Number::New(isolate, ::DDS::RETCODE_ALREADY_DELETED),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "SUBSCRIPTION_MATCHED_STATUS"),
		Number::New(isolate, ::DDS::SUBSCRIPTION_MATCHED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NEW_VIEW_STATE"),
		Number::New(isolate, ::DDS::NEW_VIEW_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_PRECONDITION_NOT_MET"),
		Number::New(isolate, ::DDS::RETCODE_PRECONDITION_NOT_MET),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "OWNERSHIP_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::OWNERSHIP_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_NO_DATA"),
		Number::New(isolate, ::DDS::RETCODE_NO_DATA),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TOPICDATA_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::TOPICDATA_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LATENCYBUDGET_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::LATENCYBUDGET_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURABILITY_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::DURABILITY_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "WRITERDATALIFECYCLE_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::WRITERDATALIFECYCLE_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "DURATION_INFINITE_SEC"),
		Number::New(isolate, ::DDS::DURATION_INFINITE_SEC),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ENTITYFACTORY_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::ENTITYFACTORY_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_TIMEOUT"),
		Number::New(isolate, ::DDS::RETCODE_TIMEOUT),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LIVELINESS_CHANGED_STATUS"),
		Number::New(isolate, ::DDS::LIVELINESS_CHANGED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "REQUESTED_INCOMPATIBLE_QOS_STATUS"),
		Number::New(isolate, ::DDS::REQUESTED_INCOMPATIBLE_QOS_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "LENGTH_UNLIMITED"),
		Number::New(isolate, ::DDS::LENGTH_UNLIMITED),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "USERDATA_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::USERDATA_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "TIMEBASEDFILTER_QOS_POLICY_NAME"),
		String::NewFromUtf8(isolate, ::DDS::TIMEBASEDFILTER_QOS_POLICY_NAME),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RELIABILITY_QOS_POLICY_ID"),
		Number::New(isolate, ::DDS::RELIABILITY_QOS_POLICY_ID),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "REQUESTED_DEADLINE_MISSED_STATUS"),
		Number::New(isolate, ::DDS::REQUESTED_DEADLINE_MISSED_STATUS),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "NOT_READ_SAMPLE_STATE"),
		Number::New(isolate, ::DDS::NOT_READ_SAMPLE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "ANY_VIEW_STATE"),
		Number::New(isolate, ::DDS::ANY_VIEW_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "READ_SAMPLE_STATE"),
		Number::New(isolate, ::DDS::READ_SAMPLE_STATE),
		::v8::ReadOnly);
	moduleExports->ForceSet(isolate->GetCurrentContext(),
		String::NewFromUtf8(isolate, "RETCODE_ERROR"),
		Number::New(isolate, ::DDS::RETCODE_ERROR),
		::v8::ReadOnly);


	//
	// Enum Initializations
	//
	::DDS::PresentationQosPolicyAccessScopeKindField::Init(moduleExports);
	::DDS::HistoryQosPolicyKindField::Init(moduleExports);
	::DDS::DestinationOrderQosPolicyKindField::Init(moduleExports);
	::DDS::ReliabilityQosPolicyKindField::Init(moduleExports);
	::DDS::LivelinessQosPolicyKindField::Init(moduleExports);
	::DDS::DurabilityQosPolicyKindField::Init(moduleExports);
	::DDS::SampleRejectedStatusKindField::Init(moduleExports);
	::DDS::OwnershipQosPolicyKindField::Init(moduleExports);


	//
	// Union Initializations
	//

	//
	// Struct/Topic Initializations
	//
	::DDS::TimeBasedFilterQosPolicyField::Init(moduleExports);
	::DDS::DataWriterQosField::Init(moduleExports);
	::DDS::EntityFactoryQosPolicyField::Init(moduleExports);
	::DDS::LivelinessChangedStatusField::Init(moduleExports);
	::DDS::RequestedIncompatibleQosStatusField::Init(moduleExports);
	::DDS::ParticipantBuiltinTopicDataField::Init(moduleExports);
	::DDS::SampleRejectedStatusField::Init(moduleExports);
	::DDS::LatencyBudgetQosPolicyField::Init(moduleExports);
	::DDS::TopicQosField::Init(moduleExports);
	::DDS::SubscriberQosField::Init(moduleExports);
	::DDS::SampleInfoField::Init(moduleExports);
	::DDS::PresentationQosPolicyField::Init(moduleExports);
	::DDS::Duration_tField::Init(moduleExports);
	::DDS::LivelinessLostStatusField::Init(moduleExports);
	::DDS::PublisherQosField::Init(moduleExports);
	::DDS::DataReaderQosField::Init(moduleExports);
	::DDS::DeadlineQosPolicyField::Init(moduleExports);
	::DDS::WriterDataLifecycleQosPolicyField::Init(moduleExports);
	::DDS::LivelinessQosPolicyField::Init(moduleExports);
	::DDS::PublicationBuiltinTopicDataField::Init(moduleExports);
	::DDS::DestinationOrderQosPolicyField::Init(moduleExports);
	::DDS::SubscriptionBuiltinTopicDataField::Init(moduleExports);
	::DDS::DurabilityServiceQosPolicyField::Init(moduleExports);
	::DDS::SampleLostStatusField::Init(moduleExports);
	::DDS::LifespanQosPolicyField::Init(moduleExports);
	::DDS::OwnershipQosPolicyField::Init(moduleExports);
	::DDS::PublicationMatchedStatusField::Init(moduleExports);
	::DDS::ResourceLimitsQosPolicyField::Init(moduleExports);
	::DDS::RequestedDeadlineMissedStatusField::Init(moduleExports);
	::DDS::DomainParticipantFactoryQosField::Init(moduleExports);
	::DDS::SubscriptionMatchedStatusField::Init(moduleExports);
	::DDS::ReliabilityQosPolicyField::Init(moduleExports);
	::DDS::InconsistentTopicStatusField::Init(moduleExports);
	::DDS::DurabilityQosPolicyField::Init(moduleExports);
	::DDS::ReaderDataLifecycleQosPolicyField::Init(moduleExports);
	::DDS::UserDataQosPolicyField::Init(moduleExports);
	::DDS::HistoryQosPolicyField::Init(moduleExports);
	::DDS::QosPolicyCountField::Init(moduleExports);
	::DDS::PartitionQosPolicyField::Init(moduleExports);
	::DDS::BuiltinTopicKey_tField::Init(moduleExports);
	::DDS::OfferedIncompatibleQosStatusField::Init(moduleExports);
	::DDS::OwnershipStrengthQosPolicyField::Init(moduleExports);
	::DDS::GroupDataQosPolicyField::Init(moduleExports);
	::DDS::TopicDataQosPolicyField::Init(moduleExports);
	::DDS::DomainParticipantQosField::Init(moduleExports);
	::DDS::OfferedDeadlineMissedStatusField::Init(moduleExports);
	::DDS::TransportPriorityQosPolicyField::Init(moduleExports);


	//
	// Child Module Initialization
	//

}


} // end namespace DDS

