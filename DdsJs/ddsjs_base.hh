// ----------------------------------------------------------------------------
// This code was automatically generated by the DDS.js compiler. Do not edit
// by hand as changes will be lost during recompilation.
// Generated on: March 6, 2020 at 6:32:15 PM GMT
// ----------------------------------------------------------------------------

#ifndef DDSJS_BASE_HH
# define DDSJS_BASE_HH

#include <v8.h>
#include <node.h>
#include <node_object_wrap.h>

#include <DdsJs/coredx_missing.hh>
#include <DdsJs/TypeUtility.hh>


// ======================================================
// MODULE DECLARATION: DDS
// ======================================================
namespace DDS {

// ======================================================
// ENUM DECLARATION: PresentationQosPolicyAccessScopeKind
// ======================================================
struct PresentationQosPolicyAccessScopeKindField
{
	typedef ::DDS::PresentationQosPolicyAccessScopeKind ValueType;
	typedef ::DDS::PresentationQosPolicyAccessScopeKind& RefType;
	typedef ::DDS::PresentationQosPolicyAccessScopeKind const& ConstRefType;
	typedef ::DDS::PresentationQosPolicyAccessScopeKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: HistoryQosPolicyKind
// ======================================================
struct HistoryQosPolicyKindField
{
	typedef ::DDS::HistoryQosPolicyKind ValueType;
	typedef ::DDS::HistoryQosPolicyKind& RefType;
	typedef ::DDS::HistoryQosPolicyKind const& ConstRefType;
	typedef ::DDS::HistoryQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: DestinationOrderQosPolicyKind
// ======================================================
struct DestinationOrderQosPolicyKindField
{
	typedef ::DDS::DestinationOrderQosPolicyKind ValueType;
	typedef ::DDS::DestinationOrderQosPolicyKind& RefType;
	typedef ::DDS::DestinationOrderQosPolicyKind const& ConstRefType;
	typedef ::DDS::DestinationOrderQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: ReliabilityQosPolicyKind
// ======================================================
struct ReliabilityQosPolicyKindField
{
	typedef ::DDS::ReliabilityQosPolicyKind ValueType;
	typedef ::DDS::ReliabilityQosPolicyKind& RefType;
	typedef ::DDS::ReliabilityQosPolicyKind const& ConstRefType;
	typedef ::DDS::ReliabilityQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: LivelinessQosPolicyKind
// ======================================================
struct LivelinessQosPolicyKindField
{
	typedef ::DDS::LivelinessQosPolicyKind ValueType;
	typedef ::DDS::LivelinessQosPolicyKind& RefType;
	typedef ::DDS::LivelinessQosPolicyKind const& ConstRefType;
	typedef ::DDS::LivelinessQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: DurabilityQosPolicyKind
// ======================================================
struct DurabilityQosPolicyKindField
{
	typedef ::DDS::DurabilityQosPolicyKind ValueType;
	typedef ::DDS::DurabilityQosPolicyKind& RefType;
	typedef ::DDS::DurabilityQosPolicyKind const& ConstRefType;
	typedef ::DDS::DurabilityQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: SampleRejectedStatusKind
// ======================================================
struct SampleRejectedStatusKindField
{
	typedef ::DDS::SampleRejectedStatusKind ValueType;
	typedef ::DDS::SampleRejectedStatusKind& RefType;
	typedef ::DDS::SampleRejectedStatusKind const& ConstRefType;
	typedef ::DDS::SampleRejectedStatusKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};
// ======================================================
// ENUM DECLARATION: OwnershipQosPolicyKind
// ======================================================
struct OwnershipQosPolicyKindField
{
	typedef ::DDS::OwnershipQosPolicyKind ValueType;
	typedef ::DDS::OwnershipQosPolicyKind& RefType;
	typedef ::DDS::OwnershipQosPolicyKind const& ConstRefType;
	typedef ::DDS::OwnershipQosPolicyKind *PtrType;

	static void Init(::v8::Local< ::v8::Object > exports);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: TimeBasedFilterQosPolicy
// ======================================================
struct TimeBasedFilterQosPolicyField
{
	typedef ::DDS::TimeBasedFilterQosPolicy ValueType;
	typedef ::DDS::TimeBasedFilterQosPolicy& RefType;
	typedef ::DDS::TimeBasedFilterQosPolicy const& ConstRefType;
	typedef ::DDS::TimeBasedFilterQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > minimum_separationFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DataWriterQos
// ======================================================
struct DataWriterQosField
{
	typedef ::DDS::DataWriterQos ValueType;
	typedef ::DDS::DataWriterQos& RefType;
	typedef ::DDS::DataWriterQos const& ConstRefType;
	typedef ::DDS::DataWriterQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > durabilityFieldName;
	static ::v8::Persistent< ::v8::String > durability_serviceFieldName;
	static ::v8::Persistent< ::v8::String > deadlineFieldName;
	static ::v8::Persistent< ::v8::String > latency_budgetFieldName;
	static ::v8::Persistent< ::v8::String > livelinessFieldName;
	static ::v8::Persistent< ::v8::String > reliabilityFieldName;
	static ::v8::Persistent< ::v8::String > destination_orderFieldName;
	static ::v8::Persistent< ::v8::String > historyFieldName;
	static ::v8::Persistent< ::v8::String > resource_limitsFieldName;
	static ::v8::Persistent< ::v8::String > transport_priorityFieldName;
	static ::v8::Persistent< ::v8::String > lifespanFieldName;
	static ::v8::Persistent< ::v8::String > user_dataFieldName;
	static ::v8::Persistent< ::v8::String > ownershipFieldName;
	static ::v8::Persistent< ::v8::String > ownership_strengthFieldName;
	static ::v8::Persistent< ::v8::String > writer_data_lifecycleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: EntityFactoryQosPolicy
// ======================================================
struct EntityFactoryQosPolicyField
{
	typedef ::DDS::EntityFactoryQosPolicy ValueType;
	typedef ::DDS::EntityFactoryQosPolicy& RefType;
	typedef ::DDS::EntityFactoryQosPolicy const& ConstRefType;
	typedef ::DDS::EntityFactoryQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > autoenable_created_entitiesFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: LivelinessChangedStatus
// ======================================================
struct LivelinessChangedStatusField
{
	typedef ::DDS::LivelinessChangedStatus ValueType;
	typedef ::DDS::LivelinessChangedStatus& RefType;
	typedef ::DDS::LivelinessChangedStatus const& ConstRefType;
	typedef ::DDS::LivelinessChangedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > alive_countFieldName;
	static ::v8::Persistent< ::v8::String > not_alive_countFieldName;
	static ::v8::Persistent< ::v8::String > alive_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > not_alive_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_publication_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: RequestedIncompatibleQosStatus
// ======================================================
struct RequestedIncompatibleQosStatusField
{
	typedef ::DDS::RequestedIncompatibleQosStatus ValueType;
	typedef ::DDS::RequestedIncompatibleQosStatus& RefType;
	typedef ::DDS::RequestedIncompatibleQosStatus const& ConstRefType;
	typedef ::DDS::RequestedIncompatibleQosStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_policy_idFieldName;
	static ::v8::Persistent< ::v8::String > policiesFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: ParticipantBuiltinTopicData
// ======================================================
struct ParticipantBuiltinTopicDataField
{
	typedef ::DDS::ParticipantBuiltinTopicData ValueType;
	typedef ::DDS::ParticipantBuiltinTopicData& RefType;
	typedef ::DDS::ParticipantBuiltinTopicData const& ConstRefType;
	typedef ::DDS::ParticipantBuiltinTopicData *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > keyFieldName;
	static ::v8::Persistent< ::v8::String > user_dataFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SampleRejectedStatus
// ======================================================
struct SampleRejectedStatusField
{
	typedef ::DDS::SampleRejectedStatus ValueType;
	typedef ::DDS::SampleRejectedStatus& RefType;
	typedef ::DDS::SampleRejectedStatus const& ConstRefType;
	typedef ::DDS::SampleRejectedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_reasonFieldName;
	static ::v8::Persistent< ::v8::String > last_instance_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: LatencyBudgetQosPolicy
// ======================================================
struct LatencyBudgetQosPolicyField
{
	typedef ::DDS::LatencyBudgetQosPolicy ValueType;
	typedef ::DDS::LatencyBudgetQosPolicy& RefType;
	typedef ::DDS::LatencyBudgetQosPolicy const& ConstRefType;
	typedef ::DDS::LatencyBudgetQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > durationFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: TopicQos
// ======================================================
struct TopicQosField
{
	typedef ::DDS::TopicQos ValueType;
	typedef ::DDS::TopicQos& RefType;
	typedef ::DDS::TopicQos const& ConstRefType;
	typedef ::DDS::TopicQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > topic_dataFieldName;
	static ::v8::Persistent< ::v8::String > durabilityFieldName;
	static ::v8::Persistent< ::v8::String > durability_serviceFieldName;
	static ::v8::Persistent< ::v8::String > deadlineFieldName;
	static ::v8::Persistent< ::v8::String > latency_budgetFieldName;
	static ::v8::Persistent< ::v8::String > livelinessFieldName;
	static ::v8::Persistent< ::v8::String > reliabilityFieldName;
	static ::v8::Persistent< ::v8::String > destination_orderFieldName;
	static ::v8::Persistent< ::v8::String > historyFieldName;
	static ::v8::Persistent< ::v8::String > resource_limitsFieldName;
	static ::v8::Persistent< ::v8::String > transport_priorityFieldName;
	static ::v8::Persistent< ::v8::String > lifespanFieldName;
	static ::v8::Persistent< ::v8::String > ownershipFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SubscriberQos
// ======================================================
struct SubscriberQosField
{
	typedef ::DDS::SubscriberQos ValueType;
	typedef ::DDS::SubscriberQos& RefType;
	typedef ::DDS::SubscriberQos const& ConstRefType;
	typedef ::DDS::SubscriberQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > presentationFieldName;
	static ::v8::Persistent< ::v8::String > partitionFieldName;
	static ::v8::Persistent< ::v8::String > group_dataFieldName;
	static ::v8::Persistent< ::v8::String > entity_factoryFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SampleInfo
// ======================================================
struct SampleInfoField
{
	typedef ::DDS::SampleInfo ValueType;
	typedef ::DDS::SampleInfo& RefType;
	typedef ::DDS::SampleInfo const& ConstRefType;
	typedef ::DDS::SampleInfo *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > sample_stateFieldName;
	static ::v8::Persistent< ::v8::String > view_stateFieldName;
	static ::v8::Persistent< ::v8::String > instance_stateFieldName;
	static ::v8::Persistent< ::v8::String > instance_handleFieldName;
	static ::v8::Persistent< ::v8::String > publication_handleFieldName;
	static ::v8::Persistent< ::v8::String > disposed_generation_countFieldName;
	static ::v8::Persistent< ::v8::String > no_writers_generation_countFieldName;
	static ::v8::Persistent< ::v8::String > sample_rankFieldName;
	static ::v8::Persistent< ::v8::String > generation_rankFieldName;
	static ::v8::Persistent< ::v8::String > absolute_generation_rankFieldName;
	static ::v8::Persistent< ::v8::String > valid_dataFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: PresentationQosPolicy
// ======================================================
struct PresentationQosPolicyField
{
	typedef ::DDS::PresentationQosPolicy ValueType;
	typedef ::DDS::PresentationQosPolicy& RefType;
	typedef ::DDS::PresentationQosPolicy const& ConstRefType;
	typedef ::DDS::PresentationQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > access_scopeFieldName;
	static ::v8::Persistent< ::v8::String > coherent_accessFieldName;
	static ::v8::Persistent< ::v8::String > ordered_accessFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: Duration_t
// ======================================================
struct Duration_tField
{
	typedef ::DDS::Duration_t ValueType;
	typedef ::DDS::Duration_t& RefType;
	typedef ::DDS::Duration_t const& ConstRefType;
	typedef ::DDS::Duration_t *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > secFieldName;
	static ::v8::Persistent< ::v8::String > nanosecFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: LivelinessLostStatus
// ======================================================
struct LivelinessLostStatusField
{
	typedef ::DDS::LivelinessLostStatus ValueType;
	typedef ::DDS::LivelinessLostStatus& RefType;
	typedef ::DDS::LivelinessLostStatus const& ConstRefType;
	typedef ::DDS::LivelinessLostStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: PublisherQos
// ======================================================
struct PublisherQosField
{
	typedef ::DDS::PublisherQos ValueType;
	typedef ::DDS::PublisherQos& RefType;
	typedef ::DDS::PublisherQos const& ConstRefType;
	typedef ::DDS::PublisherQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > presentationFieldName;
	static ::v8::Persistent< ::v8::String > partitionFieldName;
	static ::v8::Persistent< ::v8::String > group_dataFieldName;
	static ::v8::Persistent< ::v8::String > entity_factoryFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DataReaderQos
// ======================================================
struct DataReaderQosField
{
	typedef ::DDS::DataReaderQos ValueType;
	typedef ::DDS::DataReaderQos& RefType;
	typedef ::DDS::DataReaderQos const& ConstRefType;
	typedef ::DDS::DataReaderQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > durabilityFieldName;
	static ::v8::Persistent< ::v8::String > deadlineFieldName;
	static ::v8::Persistent< ::v8::String > latency_budgetFieldName;
	static ::v8::Persistent< ::v8::String > livelinessFieldName;
	static ::v8::Persistent< ::v8::String > reliabilityFieldName;
	static ::v8::Persistent< ::v8::String > destination_orderFieldName;
	static ::v8::Persistent< ::v8::String > historyFieldName;
	static ::v8::Persistent< ::v8::String > resource_limitsFieldName;
	static ::v8::Persistent< ::v8::String > user_dataFieldName;
	static ::v8::Persistent< ::v8::String > ownershipFieldName;
	static ::v8::Persistent< ::v8::String > time_based_filterFieldName;
	static ::v8::Persistent< ::v8::String > reader_data_lifecycleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DeadlineQosPolicy
// ======================================================
struct DeadlineQosPolicyField
{
	typedef ::DDS::DeadlineQosPolicy ValueType;
	typedef ::DDS::DeadlineQosPolicy& RefType;
	typedef ::DDS::DeadlineQosPolicy const& ConstRefType;
	typedef ::DDS::DeadlineQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > periodFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: WriterDataLifecycleQosPolicy
// ======================================================
struct WriterDataLifecycleQosPolicyField
{
	typedef ::DDS::WriterDataLifecycleQosPolicy ValueType;
	typedef ::DDS::WriterDataLifecycleQosPolicy& RefType;
	typedef ::DDS::WriterDataLifecycleQosPolicy const& ConstRefType;
	typedef ::DDS::WriterDataLifecycleQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > autodispose_unregistered_instancesFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: LivelinessQosPolicy
// ======================================================
struct LivelinessQosPolicyField
{
	typedef ::DDS::LivelinessQosPolicy ValueType;
	typedef ::DDS::LivelinessQosPolicy& RefType;
	typedef ::DDS::LivelinessQosPolicy const& ConstRefType;
	typedef ::DDS::LivelinessQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;
	static ::v8::Persistent< ::v8::String > lease_durationFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: PublicationBuiltinTopicData
// ======================================================
struct PublicationBuiltinTopicDataField
{
	typedef ::DDS::PublicationBuiltinTopicData ValueType;
	typedef ::DDS::PublicationBuiltinTopicData& RefType;
	typedef ::DDS::PublicationBuiltinTopicData const& ConstRefType;
	typedef ::DDS::PublicationBuiltinTopicData *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > keyFieldName;
	static ::v8::Persistent< ::v8::String > participant_keyFieldName;
	static ::v8::Persistent< ::v8::String > topic_nameFieldName;
	static ::v8::Persistent< ::v8::String > type_nameFieldName;
	static ::v8::Persistent< ::v8::String > durabilityFieldName;
	static ::v8::Persistent< ::v8::String > durability_serviceFieldName;
	static ::v8::Persistent< ::v8::String > deadlineFieldName;
	static ::v8::Persistent< ::v8::String > latency_budgetFieldName;
	static ::v8::Persistent< ::v8::String > livelinessFieldName;
	static ::v8::Persistent< ::v8::String > reliabilityFieldName;
	static ::v8::Persistent< ::v8::String > lifespanFieldName;
	static ::v8::Persistent< ::v8::String > user_dataFieldName;
	static ::v8::Persistent< ::v8::String > ownershipFieldName;
	static ::v8::Persistent< ::v8::String > ownership_strengthFieldName;
	static ::v8::Persistent< ::v8::String > destination_orderFieldName;
	static ::v8::Persistent< ::v8::String > presentationFieldName;
	static ::v8::Persistent< ::v8::String > partitionFieldName;
	static ::v8::Persistent< ::v8::String > topic_dataFieldName;
	static ::v8::Persistent< ::v8::String > group_dataFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DestinationOrderQosPolicy
// ======================================================
struct DestinationOrderQosPolicyField
{
	typedef ::DDS::DestinationOrderQosPolicy ValueType;
	typedef ::DDS::DestinationOrderQosPolicy& RefType;
	typedef ::DDS::DestinationOrderQosPolicy const& ConstRefType;
	typedef ::DDS::DestinationOrderQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SubscriptionBuiltinTopicData
// ======================================================
struct SubscriptionBuiltinTopicDataField
{
	typedef ::DDS::SubscriptionBuiltinTopicData ValueType;
	typedef ::DDS::SubscriptionBuiltinTopicData& RefType;
	typedef ::DDS::SubscriptionBuiltinTopicData const& ConstRefType;
	typedef ::DDS::SubscriptionBuiltinTopicData *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > keyFieldName;
	static ::v8::Persistent< ::v8::String > participant_keyFieldName;
	static ::v8::Persistent< ::v8::String > topic_nameFieldName;
	static ::v8::Persistent< ::v8::String > type_nameFieldName;
	static ::v8::Persistent< ::v8::String > durabilityFieldName;
	static ::v8::Persistent< ::v8::String > deadlineFieldName;
	static ::v8::Persistent< ::v8::String > latency_budgetFieldName;
	static ::v8::Persistent< ::v8::String > livelinessFieldName;
	static ::v8::Persistent< ::v8::String > reliabilityFieldName;
	static ::v8::Persistent< ::v8::String > ownershipFieldName;
	static ::v8::Persistent< ::v8::String > destination_orderFieldName;
	static ::v8::Persistent< ::v8::String > user_dataFieldName;
	static ::v8::Persistent< ::v8::String > time_based_filterFieldName;
	static ::v8::Persistent< ::v8::String > presentationFieldName;
	static ::v8::Persistent< ::v8::String > partitionFieldName;
	static ::v8::Persistent< ::v8::String > topic_dataFieldName;
	static ::v8::Persistent< ::v8::String > group_dataFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DurabilityServiceQosPolicy
// ======================================================
struct DurabilityServiceQosPolicyField
{
	typedef ::DDS::DurabilityServiceQosPolicy ValueType;
	typedef ::DDS::DurabilityServiceQosPolicy& RefType;
	typedef ::DDS::DurabilityServiceQosPolicy const& ConstRefType;
	typedef ::DDS::DurabilityServiceQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > service_cleanup_delayFieldName;
	static ::v8::Persistent< ::v8::String > history_kindFieldName;
	static ::v8::Persistent< ::v8::String > history_depthFieldName;
	static ::v8::Persistent< ::v8::String > max_samplesFieldName;
	static ::v8::Persistent< ::v8::String > max_instancesFieldName;
	static ::v8::Persistent< ::v8::String > max_samples_per_instanceFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SampleLostStatus
// ======================================================
struct SampleLostStatusField
{
	typedef ::DDS::SampleLostStatus ValueType;
	typedef ::DDS::SampleLostStatus& RefType;
	typedef ::DDS::SampleLostStatus const& ConstRefType;
	typedef ::DDS::SampleLostStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: LifespanQosPolicy
// ======================================================
struct LifespanQosPolicyField
{
	typedef ::DDS::LifespanQosPolicy ValueType;
	typedef ::DDS::LifespanQosPolicy& RefType;
	typedef ::DDS::LifespanQosPolicy const& ConstRefType;
	typedef ::DDS::LifespanQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > durationFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: OwnershipQosPolicy
// ======================================================
struct OwnershipQosPolicyField
{
	typedef ::DDS::OwnershipQosPolicy ValueType;
	typedef ::DDS::OwnershipQosPolicy& RefType;
	typedef ::DDS::OwnershipQosPolicy const& ConstRefType;
	typedef ::DDS::OwnershipQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: PublicationMatchedStatus
// ======================================================
struct PublicationMatchedStatusField
{
	typedef ::DDS::PublicationMatchedStatus ValueType;
	typedef ::DDS::PublicationMatchedStatus& RefType;
	typedef ::DDS::PublicationMatchedStatus const& ConstRefType;
	typedef ::DDS::PublicationMatchedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > current_countFieldName;
	static ::v8::Persistent< ::v8::String > current_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_subscription_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: ResourceLimitsQosPolicy
// ======================================================
struct ResourceLimitsQosPolicyField
{
	typedef ::DDS::ResourceLimitsQosPolicy ValueType;
	typedef ::DDS::ResourceLimitsQosPolicy& RefType;
	typedef ::DDS::ResourceLimitsQosPolicy const& ConstRefType;
	typedef ::DDS::ResourceLimitsQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > max_samplesFieldName;
	static ::v8::Persistent< ::v8::String > max_instancesFieldName;
	static ::v8::Persistent< ::v8::String > max_samples_per_instanceFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: RequestedDeadlineMissedStatus
// ======================================================
struct RequestedDeadlineMissedStatusField
{
	typedef ::DDS::RequestedDeadlineMissedStatus ValueType;
	typedef ::DDS::RequestedDeadlineMissedStatus& RefType;
	typedef ::DDS::RequestedDeadlineMissedStatus const& ConstRefType;
	typedef ::DDS::RequestedDeadlineMissedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_instance_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DomainParticipantFactoryQos
// ======================================================
struct DomainParticipantFactoryQosField
{
	typedef ::DDS::DomainParticipantFactoryQos ValueType;
	typedef ::DDS::DomainParticipantFactoryQos& RefType;
	typedef ::DDS::DomainParticipantFactoryQos const& ConstRefType;
	typedef ::DDS::DomainParticipantFactoryQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > entity_factoryFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: SubscriptionMatchedStatus
// ======================================================
struct SubscriptionMatchedStatusField
{
	typedef ::DDS::SubscriptionMatchedStatus ValueType;
	typedef ::DDS::SubscriptionMatchedStatus& RefType;
	typedef ::DDS::SubscriptionMatchedStatus const& ConstRefType;
	typedef ::DDS::SubscriptionMatchedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > current_countFieldName;
	static ::v8::Persistent< ::v8::String > current_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_publication_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: ReliabilityQosPolicy
// ======================================================
struct ReliabilityQosPolicyField
{
	typedef ::DDS::ReliabilityQosPolicy ValueType;
	typedef ::DDS::ReliabilityQosPolicy& RefType;
	typedef ::DDS::ReliabilityQosPolicy const& ConstRefType;
	typedef ::DDS::ReliabilityQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;
	static ::v8::Persistent< ::v8::String > max_blocking_timeFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: InconsistentTopicStatus
// ======================================================
struct InconsistentTopicStatusField
{
	typedef ::DDS::InconsistentTopicStatus ValueType;
	typedef ::DDS::InconsistentTopicStatus& RefType;
	typedef ::DDS::InconsistentTopicStatus const& ConstRefType;
	typedef ::DDS::InconsistentTopicStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DurabilityQosPolicy
// ======================================================
struct DurabilityQosPolicyField
{
	typedef ::DDS::DurabilityQosPolicy ValueType;
	typedef ::DDS::DurabilityQosPolicy& RefType;
	typedef ::DDS::DurabilityQosPolicy const& ConstRefType;
	typedef ::DDS::DurabilityQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: ReaderDataLifecycleQosPolicy
// ======================================================
struct ReaderDataLifecycleQosPolicyField
{
	typedef ::DDS::ReaderDataLifecycleQosPolicy ValueType;
	typedef ::DDS::ReaderDataLifecycleQosPolicy& RefType;
	typedef ::DDS::ReaderDataLifecycleQosPolicy const& ConstRefType;
	typedef ::DDS::ReaderDataLifecycleQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > autopurge_nowriter_samples_delayFieldName;
	static ::v8::Persistent< ::v8::String > autopurge_disposed_samples_delayFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: UserDataQosPolicy
// ======================================================
struct UserDataQosPolicyField
{
	typedef ::DDS::UserDataQosPolicy ValueType;
	typedef ::DDS::UserDataQosPolicy& RefType;
	typedef ::DDS::UserDataQosPolicy const& ConstRefType;
	typedef ::DDS::UserDataQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: HistoryQosPolicy
// ======================================================
struct HistoryQosPolicyField
{
	typedef ::DDS::HistoryQosPolicy ValueType;
	typedef ::DDS::HistoryQosPolicy& RefType;
	typedef ::DDS::HistoryQosPolicy const& ConstRefType;
	typedef ::DDS::HistoryQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > kindFieldName;
	static ::v8::Persistent< ::v8::String > depthFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: QosPolicyCount
// ======================================================
struct QosPolicyCountField
{
	typedef ::DDS::QosPolicyCount ValueType;
	typedef ::DDS::QosPolicyCount& RefType;
	typedef ::DDS::QosPolicyCount const& ConstRefType;
	typedef ::DDS::QosPolicyCount *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > policy_idFieldName;
	static ::v8::Persistent< ::v8::String > countFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: PartitionQosPolicy
// ======================================================
struct PartitionQosPolicyField
{
	typedef ::DDS::PartitionQosPolicy ValueType;
	typedef ::DDS::PartitionQosPolicy& RefType;
	typedef ::DDS::PartitionQosPolicy const& ConstRefType;
	typedef ::DDS::PartitionQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > nameFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: BuiltinTopicKey_t
// ======================================================
struct BuiltinTopicKey_tField
{
	typedef ::DDS::BuiltinTopicKey_t ValueType;
	typedef ::DDS::BuiltinTopicKey_t& RefType;
	typedef ::DDS::BuiltinTopicKey_t const& ConstRefType;
	typedef ::DDS::BuiltinTopicKey_t *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: OfferedIncompatibleQosStatus
// ======================================================
struct OfferedIncompatibleQosStatusField
{
	typedef ::DDS::OfferedIncompatibleQosStatus ValueType;
	typedef ::DDS::OfferedIncompatibleQosStatus& RefType;
	typedef ::DDS::OfferedIncompatibleQosStatus const& ConstRefType;
	typedef ::DDS::OfferedIncompatibleQosStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_policy_idFieldName;
	static ::v8::Persistent< ::v8::String > policiesFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: OwnershipStrengthQosPolicy
// ======================================================
struct OwnershipStrengthQosPolicyField
{
	typedef ::DDS::OwnershipStrengthQosPolicy ValueType;
	typedef ::DDS::OwnershipStrengthQosPolicy& RefType;
	typedef ::DDS::OwnershipStrengthQosPolicy const& ConstRefType;
	typedef ::DDS::OwnershipStrengthQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: GroupDataQosPolicy
// ======================================================
struct GroupDataQosPolicyField
{
	typedef ::DDS::GroupDataQosPolicy ValueType;
	typedef ::DDS::GroupDataQosPolicy& RefType;
	typedef ::DDS::GroupDataQosPolicy const& ConstRefType;
	typedef ::DDS::GroupDataQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: TopicDataQosPolicy
// ======================================================
struct TopicDataQosPolicyField
{
	typedef ::DDS::TopicDataQosPolicy ValueType;
	typedef ::DDS::TopicDataQosPolicy& RefType;
	typedef ::DDS::TopicDataQosPolicy const& ConstRefType;
	typedef ::DDS::TopicDataQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: DomainParticipantQos
// ======================================================
struct DomainParticipantQosField
{
	typedef ::DDS::DomainParticipantQos ValueType;
	typedef ::DDS::DomainParticipantQos& RefType;
	typedef ::DDS::DomainParticipantQos const& ConstRefType;
	typedef ::DDS::DomainParticipantQos *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > user_dataFieldName;
	static ::v8::Persistent< ::v8::String > entity_factoryFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: OfferedDeadlineMissedStatus
// ======================================================
struct OfferedDeadlineMissedStatusField
{
	typedef ::DDS::OfferedDeadlineMissedStatus ValueType;
	typedef ::DDS::OfferedDeadlineMissedStatus& RefType;
	typedef ::DDS::OfferedDeadlineMissedStatus const& ConstRefType;
	typedef ::DDS::OfferedDeadlineMissedStatus *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > total_countFieldName;
	static ::v8::Persistent< ::v8::String > total_count_changeFieldName;
	static ::v8::Persistent< ::v8::String > last_instance_handleFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};

// ======================================================
// TOPIC DECLARATION: TransportPriorityQosPolicy
// ======================================================
struct TransportPriorityQosPolicyField
{
	typedef ::DDS::TransportPriorityQosPolicy ValueType;
	typedef ::DDS::TransportPriorityQosPolicy& RefType;
	typedef ::DDS::TransportPriorityQosPolicy const& ConstRefType;
	typedef ::DDS::TransportPriorityQosPolicy *PtrType;

	// Structure Field Names
	static ::v8::Persistent< ::v8::String > valueFieldName;


	// V8 Management Functions
	static void Init(::v8::Local< ::v8::Object > exports);
	static void New(::v8::FunctionCallbackInfo< ::v8::Value > const& args);
	static ::v8::Local< ::v8::Value > FromCppToJsValue(ConstRefType cppValue);
	static bool FromJsValueToCpp(::v8::Local< ::v8::Value > jsVal, RefType cppValueRet);
};


// ======================================================
// MODULE INITIALIZATION: DDS
// ======================================================
void InitAll(::v8::Local< ::v8::Object > exports);

} // end namespace DDS

#endif /* DDSJS_BASE_HH */
