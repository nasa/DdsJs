/**
 * \file {{implementationFile.cppFileName}}
 * \brief Contains the implementation for the \c {{name}} class.
 * \note Automatically-generated code.
 * \date {{implementationFile.createDate}}
 */

#include "{{headerFile.headerFileName}}"


{{#each owner.namespaceStack}}
namespace {{this}}
{

{{/each}}
const char *{{name}}::NAME = "{{idlName}}";


Napi::Object
{{name}}::Init(Napi::Env env, Napi::Object exports)
{
    Napi::Object enum_obj = Napi::Object::New(env);
    enum_obj.DefineProperties(
        {
            {{#each mnemonicList}}
            Napi::PropertyDescriptor::Value("{{name}}", Napi::Number::New(env, {{name}}), napi_enumerable){{#unless @last}},{{/unless}}
            {{/each}}
        }
    );

    exports.Set({{name}}::NAME, enum_obj);

    return exports;
}


{{name}}::NapiContainer
{{name}}::NewInstance(Napi::Env env)
{
    Napi::EscapableHandleScope scope(env);
    Napi::Number result = Napi::Number::New(env, {{implementationFile.defaultMnemonic.name}});

    return scope.Escape((napi_value)result).ToNumber();
}


{{name}}::NapiContainer
{{name}}::NewInstance(Napi::Env env, CppEntity const& cppInstance)
{
    Napi::EscapableHandleScope scope(env);
    Napi::Number result = Napi::Number::New(env, cppInstance);

    return scope.Escape((napi_value)result).ToNumber();
}


void
{{name}}::FromCpp(Napi::Env env, CppEntity const& cppVal, NapiContainer& jsValOut)
{
    jsValOut = NewInstance(env, cppVal);
}


void
{{name}}::FromJs(Napi::Env env, NapiContainer const& jsVal, CppEntity& cppValOut)
{
    cppValOut = static_cast< CppEntity >(jsVal.Int32Value());
}

{{#itemsInReverse owner.namespaceStack}}
} // end namespace {{this}}

{{/itemsInReverse}}
// vim: set ts=4 sw=4 expandtab:
