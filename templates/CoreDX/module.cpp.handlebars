/**
 * \file {{implementationFile.cppFileName}}
 * \brief Contains the implementation for the \c {{name}} class.
 * \note Automatically-generated code.
 * \date {{implementationFile.createDate}}
 */

//
// Module Content Includes
{{#each subModuleList}}
#include <{{headerFile.headerFileName}}>
{{/each}}
{{#each codecProxyList}}
#include <{{headerFile.headerFileName}}>
{{/each}}
{{#each wrapperList}}
#include <{{headerFile.headerFileName}}>
{{/each}}

//
// Class Definition Header
#include "{{headerFile.headerFileName}}"

{{#each namespaceStack}}
namespace {{this}}
{

{{/each}}

::Napi::Object
{{name}}::Init(::Napi::Env env, ::Napi::Object exports, ::DdsJs::ConstructorRegistry *ctorReg)
{
    {{#if implementationFile.hasConstants}}
    // Constant Definitions
    {{#each constantList}}
    exports.DefineProperty(::Napi::PropertyDescriptor::Value("{{name}}", {{constantType.name}}::NewInstance(env, {{name}}), napi_enumerable));
    {{/each}}
    {{/if}}
    {{#if implementationFile.hasCodecProxies}}

    // Codec Proxies
    {{#each implementationFile.initEligibleProxies}}
    {{name}}::Init(env, exports{{#unless noCtorReg}}, ctorReg{{/unless}});
    {{/each}}
    {{/if}}
    {{#if implementationFile.hasWrappers}}

    // Wrappers
    {{#each wrapperList}}
    {{name}}::Init(env, exports, ctorReg);
    {{/each}}
    {{/if}}
    {{#if implementationFile.hasSubModules}}

    // Submodules
    {{#each implementationFile.subModuleMap}}
    ::Napi::Object {{nsVarName}} = ::Napi::Object::New(env);
    {{idlModule.idlName}}::{{idlModule.name}}::Init(env, {{nsVarName}}, ctorReg);
    exports.DefineProperty(::Napi::PropertyDescriptor::Value("{{idlModule.idlName}}", {{nsVarName}}, napi_enumerable));
    {{/each}}
    {{/if}}

    return exports;
}

{{#itemsInReverse namespaceStack}}
} // end namespace {{this}}

{{/itemsInReverse}}
// vim: set ts=4 sw=4 expandtab:
