/**
 * \file {{implementationFile.cppFileName}}
 * \brief Contains the implementation for the \c {{name}} class.
 * \note Automatically-generated code.
 * \date {{implementationFile.createDate}}
 */


//
// Class Definition Header
#include "{{headerFile.headerFileName}}"


{{#each owner.namespaceStack}}
namespace {{this}}
{

{{/each}}
const char *{{name}}::MODNAME = "{{owner.fullyScopedJsName}}";

const char *{{name}}::NAME = "{{cppCounterpartName}}";

::Napi::Object
{{name}}::Init(::Napi::Env env, ::Napi::Object exports, ::DdsJs::ConstructorRegistry *ctorReg)
{
    ::Napi::Function ctor_func = DefineClass(
        env,
        NAME,
        {
            InstanceMethod("getTypeName", &{{name}}::GetTypeName, napi_enumerable),
            InstanceMethod("registerType", &{{name}}::RegisterType, napi_enumerable)
        }
    );

    ::Napi::FunctionReference *ctor_ref = new ::Napi::FunctionReference();
    *ctor_ref = ::Napi::Persistent(ctor_func);
    ctorReg->setConstructorFor(::DdsJs::DottedName({ MODNAME, NAME }), ctor_ref);

    exports.Set(NAME, ctor_func);
    return exports;
}


{{name}}::{{name}}(::Napi::CallbackInfo const& info):
    {{{baseWrapperName}}}(
        ::DdsJs::TypeSupportAssociations(
            "{{readerWrap.fullJsClassName}}",
            "{{writerWrap.fullJsClassName}}"
        )
    ),
    ::Napi::ObjectWrap< {{name}} >(info)
{
    m_typeSupport.reset(new {{cppCounterpartName}}());
}

{{#itemsInReverse owner.namespaceStack}}
} // end namespace {{this}}

{{/itemsInReverse}}

// vim: set ts=4 sw=4 expandtab:
