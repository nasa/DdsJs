/**
 * \file {{fileName}}
 * \brief Contains the implementation of the \c {{subject.name}} structure proxy class.
 * \note Automatically-generated code.
 * \date {{createDate}}
 */

//
// Class Definition
#include "{{companionHeaderFile}}"


{{#each namespaceStack}}
namespace {{.}}
{

{{/each}}
{{#each subject.members}}
const char *{{proxyName ../subject}}::{{innerStructName .}}::NAME = "{{name}}";
{{/each}}

const char *{{proxyName subject}}::MODNAME = "{{ownerModuleNameFor subject}}";

const char *{{proxyName subject}}::NAME = "{{subject.name}}";

::Napi::Object
{{proxyName subject}}::Init(::Napi::Env env, ::Napi::Object exports, ::DdsJs::ConstructorRegistry *ctorReg)
{
    ::Napi::Function ctor_func = DefineClass(
        env,
        {{proxyName subject}}::NAME,
        {}
    );

    ::Napi::FunctionReference *ctor_ref = new ::Napi::FunctionReference();
    *ctor_ref = ::Napi::Persistent(ctor_func);
    ctorReg->setConstructorFor(::DdsJs::DottedName({ {{proxyName subject}}::MODNAME, {{proxyName subject}}::NAME }), ctor_ref);

    exports.Set({{proxyName subject}}::NAME, ctor_func);

    return exports;
}


{{proxyName subject}}::NapiContainer
{{proxyName subject}}::NewInstance(::Napi::Env env)
{
    ::Napi::EscapableHandleScope scope(env);
    ::Napi::FunctionReference *ctor_ref = env.GetInstanceData< ::DdsJs::ConstructorRegistry >()->getConstructorFor(::DdsJs::DottedName({ {{proxyName subject}}::MODNAME, {{proxyName subject}}::NAME }));
    if (nullptr == ctor_ref)
    {
        throw ::Napi::Error::New(env, "Internal error: Constructor for {{subject.name}} not available.");
    }

    return scope.Escape((napi_value)ctor_ref->New({})).As< NapiContainer >();
}


{{proxyName subject}}::NapiContainer
{{proxyName subject}}::NewInstance(::Napi::Env env, CppEntity const& cppInstance)
{
    NapiContainer result = NewInstance(env);
    FromCpp(env, cppInstance, result);

    return result;
}


void
{{proxyName subject}}::FromCpp(::Napi::Env env, CppEntity const& cppVal, NapiContainer& jsValOut)
{
    {{#each subject.members}}
    jsValOut.Set({{innerStructName .}}::NAME, {{innerStructName .}}::Proxy::NewInstance(env, cppVal.{{fieldRef . const="yes"}}));
    {{/each}}
}


void
{{proxyName subject}}::FromJs(::Napi::Env env, NapiContainer const& jsVal, CppEntity& cppValOut)
{
    {{#each subject.members}}
    {{innerStructName .}}::Proxy::FromJs(env, jsVal.Get({{innerStructName .}}::NAME).As< {{innerStructName .}}::Proxy::NapiContainer >(), cppValOut.{{fieldRef .}});
    {{/each}}
}


{{proxyName subject}}::{{proxyName subject}}(::Napi::CallbackInfo const& info):
    ::Napi::ObjectWrap< {{proxyName subject}} >(info)
{
    NapiContainer this_instance = info.This().As< NapiContainer >();
    {{#each subject.members}}
    this_instance.Set({{innerStructName .}}::NAME, {{innerStructName .}}::Proxy::NewInstance(info.Env()));
    {{/each}}
}

{{#itemsInReverse namespaceStack}}
} // end namespace {{.}}

{{/itemsInReverse}}
// vim: set ts=4 sw=4 expandtab:
