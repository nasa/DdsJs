/**
 * \file {{fileName}}
 * \brief Contains the definition of the \c {{subject.name}} structure proxy class.
 * \note Automatically-generated code.
 * \date {{createDate}}
 */

#ifndef {{includeGuard}}
#define {{includeGuard}}

//
// NodeJs Add-on API
#include <napi.h>

//
// DdsJs Generic
#include <DdsJs/DdsJs.hh>

//
// DdsJs {{providerName}}-Specific
#include <DdsJs/Providers/{{providerName}}/{{providerName}}.hh>

//
// {{providerName}} Generated Definitions
{{#providerHeaders subject}}
#include <{{.}}>
{{/providerHeaders}}

//
// Structure Member Definitions
{{#definitionHeadersWithin subject}}
#include <{{.}}>
{{else}}
// No generated headers required
{{/definitionHeadersWithin}}


{{#each namespaceStack}}
namespace {{.}}
{

{{/each}}
class {{proxyName subject}} : public ::Napi::ObjectWrap< {{proxyName subject}} >
{
public:
    {{#each subject.members}}
    struct {{innerStructName .}}
    {
        using Proxy = {{{proxyNameWithDecl typespec decl fullyQualified="yes"}}};
        static const char *NAME;
    };

    {{/each}}
    using CppEntity = {{nativeTypeName subject}};
    using NapiContainer = {{napiContainer subject}};

    static const char *MODNAME;
    
    static const char *NAME;

    static ::Napi::Object Init(::Napi::Env env, ::Napi::Object exports, ::DdsJs::ConstructorRegistry *ctorReg);

    static NapiContainer NewInstance(::Napi::Env env);

    static NapiContainer NewInstance(::Napi::Env env, CppEntity const& cppInstance);

    static void FromCpp(::Napi::Env env, CppEntity const& cppVal, NapiContainer& jsValOut);

    static void FromJs(::Napi::Env env, NapiContainer const& jsVal, CppEntity& cppValOut);

    {{proxyName subject}}(::Napi::CallbackInfo const& info);

    virtual ~{{proxyName subject}}() = default;
};

{{#itemsInReverse namespaceStack}}
} // end namespace {{.}}

{{/itemsInReverse}}
#endif /* !{{includeGuard}} */

// vim: set ts=4 sw=4 expandtab:
