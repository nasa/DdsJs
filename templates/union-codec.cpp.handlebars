/**
 * \file {{implementationFile.cppFileName}}
 * \brief Contains the implementation of the \c {{name}} class.
 * \note Automatically-generated code.
 * \date {{implementationFile.createDate}}
 */

{{#if implementationFile.discrHeaderFile}}
//
// Import Headers
#include <{{implementationFile.discrHeaderFile}}>

{{/if}}
//
// Class Definition Header
#include "{{headerFile.headerFileName}}"


{{#each owner.namespaceStack}}
namespace {{this}}
{

{{/each}}
{{#each cases}}
const char *{{../name}}::{{innerStructName}}::NAME = "{{name}}";
{{/each}}

const char *{{name}}::MODNAME = "{{owner.fullyScopedJsName}}";

const char *{{name}}::NAME = "{{idlName}}";

::Napi::Object
{{name}}::Init(::Napi::Env env, ::Napi::Object exports, ::DdsJs::ConstructorRegistry *ctorReg)
{
    ::Napi::Function ctor_func = DefineClass(
        env,
        {{name}}::NAME,
        {
            {{#each cases}}
            StaticMethod({{innerStructName}}::NAME, &{{../name}}::{{newInstanceMethodName}}, napi_enumerable){{#unless @last}},{{/unless}}
            {{/each}}
        }
    );

    ::Napi::FunctionReference *ctor_ref = new ::Napi::FunctionReference();
    *ctor_ref = ::Napi::Persistent(ctor_func);
    ctorReg->setConstructorFor(::DdsJs::DottedName({ {{name}}::MODNAME, {{name}}::NAME }), ctor_ref);

    exports.Set({{name}}::NAME, ctor_func);

    return exports;
}


{{name}}::NapiContainer
{{name}}::NewInstance(::Napi::Env env)
{
    ::Napi::EscapableHandleScope scope(env);
    ::Napi::FunctionReference *ctor_ref = env.GetInstanceData< ::DdsJs::ConstructorRegistry >()->getConstructorFor(::DdsJs::DottedName({ {{name}}::MODNAME, {{name}}::NAME }));
    if (nullptr == ctor_ref)
    {
        throw ::Napi::Error::New(env, "Internal error: Constructor for {{name}} not available.");
    }

    return scope.Escape((napi_value)ctor_ref->New({})).As< NapiContainer >();
}


{{name}}::NapiContainer
{{name}}::NewInstance(::Napi::Env env, CppEntity const& cppInstance)
{
    NapiContainer result = NewInstance(env);
    FromCpp(env, cppInstance, result);

    return result;
}


void
{{name}}::FromCpp(::Napi::Env env, CppEntity const& cppVal, NapiContainer& jsValOut)
{
    {{#each cases}}
    jsValOut.Delete({{innerStructName}}::NAME);
    {{/each}}

    jsValOut.Set("discriminator", {{discriminatorProxy.name}}::NewInstance(env, cppVal.discriminator()));

    {{#each cases}}
    {{#unless @first}}else {{/unless}}if
    (
        {{#each caseLabels}}
        (cppVal.discriminator() == {{this}}){{#unless @last}} ||{{/unless}}
        {{/each}}
    )
    {
        jsValOut.Set({{innerStructName}}::NAME, {{innerStructName}}::Proxy::NewInstance(env, cppVal.{{name}}()));
    }
    {{/each}}
}


void
{{name}}::FromJs(::Napi::Env env, NapiContainer const& jsVal, CppEntity& cppValOut)
{
    ::Napi::Value discriminator_val = jsVal.Get("discriminator");
    
    {{#each cases}}
    {{#unless @first}}else {{/unless}}if
    (
        {{#each caseLabels}}
        (discriminator_val.StrictEquals({{../discriminatorProxyName}}::NewInstance(env, {{this}}))){{#unless @last}} ||{{/unless}}
        {{/each}}
    )
    {
        {{innerStructName}}::Proxy::CppEntity {{name}}_value;
        {{innerStructName}}::Proxy::FromJs(env, jsVal.Get({{innerStructName}}::NAME).As< {{innerStructName}}::Proxy::NapiContainer >(), {{name}}_value);
        cppValOut.{{name}}({{name}}_value);
    }
    {{/each}}
}


{{#each cases}}
::Napi::Value
{{../name}}::{{newInstanceMethodName}}(const ::Napi::CallbackInfo &info)
{
    ::Napi::EscapableHandleScope scope(info.Env());

    if (info.Length() != 1)
    {
        throw ::Napi::Error::New(info.Env(), "{{../name}}.{{name}}() requires an argument.");
    }

    {{innerStructName}}::Proxy::CppEntity field_val;
    {{innerStructName}}::Proxy::FromJs(info.Env(), info[0].As< {{innerStructName}}::Proxy::NapiContainer >(), field_val);
    CppEntity new_val;
    new_val.{{name}}(field_val);
    NapiContainer result = NapiContainer::New(info.Env());
    {{../name}}::FromCpp(info.Env(), new_val, result);

    return scope.Escape(result);
}


{{/each}}
{{name}}::{{name}}(::Napi::CallbackInfo const& info):
    ::Napi::ObjectWrap< {{name}} >(info)
{
    NapiContainer this_instance = info.This().As< NapiContainer >();
    this_instance.Set("discriminator", {{discriminatorProxy.name}}::NewInstance(info.Env(), {{implementationFile.discrValForCtor}}));
    this_instance.Set({{implementationFile.caseForCtor.innerStructName}}::NAME, {{implementationFile.caseForCtor.innerStructName}}::Proxy::NewInstance(info.Env()));
}

{{#itemsInReverse owner.namespaceStack}}
} // end namespace {{this}}

{{/itemsInReverse}}
// vim: set ts=4 sw=4 expandtab:
