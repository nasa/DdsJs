module HostMonitor {

const unsigned long HOST_NAME_MAX_LEN = 256;

const unsigned long long BIG_INTEGER = 1224;

typedef string<HOST_NAME_MAX_LEN> HostNameType;

const unsigned long HOST_LOC_MAX_LEN = 1024;

typedef string< HOST_LOC_MAX_LEN > HostLocType;

struct HostInformation {
    HostNameType hostName;
    HostLocType hostLocation;
};
    
struct OverallInformation {
    HostInformation hostInfo;
	float cpuUtilization;
	float memoryUtilization;
};

typedef sequence< OverallInformation > InfoBundle;
const unsigned long BOUNDED_INFO_LIMIT = 128;
typedef sequence< OverallInformation, BOUNDED_INFO_LIMIT > BoundedInfoBundle;

struct Bundles {
    InfoBundle first;
    BoundedInfoBundle second;
};

enum Status {
    HOST_ONLINE,
    HOST_OFFLINE
};

enum UnionValueType
{
    VAL_SINGLE,
    VAL_INT
};
union ExampleUnion switch (UnionValueType)
{
    case VAL_SINGLE:
        float singleVal;
    case VAL_INT:
        long intVal;
};

@nested
struct DataPoint {
    double acqTime;
    unsigned short dpId;
    ExampleUnion value;
};

const unsigned long MAX_DP_COUNT = 100;

typedef sequence< DataPoint, MAX_DP_COUNT > DataPointValues;

struct DataPointFrame {
    unsigned short senderId;
    DataPointValues values;
};

const unsigned long FIXED_FRAME_SIZE = 64;

typedef octet FixedFrameContent[FIXED_FRAME_SIZE];

@nested
struct FixedFrameMeta {
    double acqTime;
    unsigned short senderId;
};

struct FixedFrame {
    FixedFrameMeta metadata;
    FixedFrameContent content;
};

struct OtherData {
    unsigned long jitArray[128];
    sequence< unsigned short, 32 > jitBoundedSequence;
    sequence< float > jitUnboundedSequence;
    string< 64 > jitBoundedString;
    string jitUnboundedString;
};

module LogTransfer {

typedef string< 1024 > LogMessageType;

struct LogEntry {
    double timestamp;
    LogMessageType logMessage;
};

};

};

module NetworkMonitor {

struct UtilizationInformation {
    float upstreamKbps;
    float downstreamKbps;
};

};
